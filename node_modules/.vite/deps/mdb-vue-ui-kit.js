import {
  Fragment,
  KeepAlive,
  Teleport,
  Transition,
  computed,
  createBaseVNode,
  createBlock,
  createCommentVNode,
  createElementBlock,
  createTextVNode,
  createVNode,
  defineComponent,
  inject,
  mergeProps,
  nextTick,
  normalizeClass,
  normalizeStyle,
  onBeforeUnmount,
  onMounted,
  onUnmounted,
  onUpdated,
  openBlock,
  provide,
  reactive,
  ref,
  renderList,
  renderSlot,
  resolveComponent,
  resolveDynamicComponent,
  toDisplayString,
  unref,
  useAttrs,
  useSlots,
  vModelRadio,
  vShow,
  watch,
  watchEffect,
  withCtx,
  withDirectives,
  withKeys,
  withModifiers
} from "./chunk-3XLVRLLD.js";
import "./chunk-6TJCVOLN.js";

// node_modules/mdb-vue-ui-kit/js/mdb.es.min.js
var ma = {
  name: "MDBBadge"
};
var Cr = defineComponent({
  ...ma,
  props: {
    badge: String,
    color: String,
    pill: Boolean,
    dot: Boolean,
    notification: Boolean,
    tag: {
      type: String,
      default: "span"
    }
  },
  setup(e, { expose: t }) {
    const a = e, l = useAttrs(), n = computed(() => [
      "badge",
      a.color && `badge-${a.color}`,
      a.badge && `bg-${a.badge}`,
      a.pill && "rounded-pill",
      a.dot && "badge-dot",
      a.notification && "badge-notification"
    ]);
    return t({ attrs: l }), (o, r) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(n.value)
    }, {
      default: withCtx(() => [
        renderSlot(o.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var ga = [
  "primary",
  "secondary",
  "success",
  "danger",
  "warning",
  "info",
  "light",
  "dark"
];
var ha = "rgba({{color}}, 0.2) 0, rgba({{color}}, 0.3) 40%, rgba({{color}}, 0.4) 50%, rgba({{color}}, 0.5) 60%, rgba({{color}}, 0) 70%";
var ya = [0, 0, 0];
var Vt = 0.5;
var ba = (e) => e && ga.includes(e.toLowerCase());
var wa = (e, t) => {
  const a = (o) => (o.length < 7 && (o = `#${o[1]}${o[1]}${o[2]}${o[2]}${o[3]}${o[3]}`), [
    parseInt(o.substr(1, 2), 16),
    parseInt(o.substr(3, 2), 16),
    parseInt(o.substr(5, 2), 16)
  ]), l = (o) => {
    const r = document.body.appendChild(
      document.createElement("fictum")
    ), s = "rgb(1, 2, 3)";
    return r.style.color = s, r.style.color !== s || (r.style.color = o, r.style.color === s || r.style.color === "") ? (document.body.removeChild(r), t) : (o = getComputedStyle(r).color, document.body.removeChild(r), o);
  }, n = (o) => {
    const r = o.match(/[.\d]+/g);
    if (r === null)
      return;
    const s = r.map((u) => +Number(u));
    return s.length = 3, s;
  };
  return typeof e == "string" && e.toLowerCase() === "transparent" ? t : typeof e == "string" && e[0] === "#" ? a(e) : (typeof e == "string" && e.indexOf("rgb") === -1 && (e = l(e)), typeof e == "string" && e.indexOf("rgb") === 0 ? n(e) : t);
};
var ka = ({ offsetX: e, offsetY: t, height: a, width: l }) => {
  const n = t <= a / 2, o = e <= l / 2, r = (m, $) => Math.sqrt(m ** 2 + $ ** 2), s = t === a / 2 && e === l / 2, u = {
    first: n === true && o === false,
    second: n === true && o === true,
    third: n === false && o === true,
    fourth: n === false && o === false
  }, c = {
    topLeft: r(e, t),
    topRight: r(l - e, t),
    bottomLeft: r(e, a - t),
    bottomRight: r(l - e, a - t)
  };
  let i = 0;
  return s || u.fourth ? i = c.topLeft : u.third ? i = c.topRight : u.second ? i = c.bottomRight : u.first && (i = c.bottomLeft), i * 2;
};
var Ba = (e, t) => {
  for (const a in t)
    e.style[a] = t[a];
};
var $a = (e) => {
  const t = wa(e, ya);
  if (e !== "" && t) {
    const a = t.join(",");
    return `radial-gradient(circle, ${ha.split("{{color}}").join(`${a}`)})`;
  }
};
var Sa = (e, t, a) => {
  const l = document.createElement("div");
  l.classList.add("ripple-wave");
  const n = {
    offsetX: a.centered ? t.height / 2 : t.left,
    offsetY: a.centered ? t.width / 2 : t.top,
    height: t.height,
    width: t.width
  }, o = ka(n), r = a.radius || o / 2, s = {
    delay: a.duration && a.duration * Vt,
    duration: a.duration && a.duration - a.duration * Vt
  }, u = {
    left: a.centered ? `${Math.round(t.width / 2 - r)}px` : `${Math.round(t.left - r)}px`,
    top: a.centered ? `${Math.round(t.height / 2 - r)}px` : `${Math.round(t.top - r)}px`,
    height: `${Math.round(
      a.radius && a.radius * 2 || o
    )}px`,
    width: `${Math.round(
      a.radius && a.radius * 2 || o
    )}px`,
    transitionDelay: `0s, ${s.delay}ms`,
    transitionDuration: `${a.duration}ms, ${s.duration}ms`
  };
  a.unbound && e.classList.add("ripple-surface-unbound"), ba(a.color) ? e.classList.add(`ripple-surface-${a.color}`) : u.backgroundImage = $a(a.color), Ba(l, u), e.appendChild(l), setTimeout(() => {
    l.classList.add("active");
  }, 50), setTimeout(
    () => {
      e.removeChild(l);
    },
    a.duration ? a.duration + 1e3 : 1e3
  );
};
var it = {
  mounted(e, t) {
    if (t.value === false)
      return;
    const a = {
      centered: t.value && t.value.centered || false,
      color: t.value && t.value.color || "",
      duration: t.value && t.value.duration || 500,
      radius: t.value && t.value.radius || 0,
      unbound: t.value && t.value.unbound || false
    };
    e.classList.add("ripple-surface"), e.waves = (l) => {
      const n = {
        top: l.offsetY,
        left: l.offsetX,
        height: e.offsetHeight,
        width: e.offsetWidth
      };
      Sa(e, n, a);
    }, e.addEventListener("click", (l) => e.waves(l));
  },
  updated(e, t) {
    t.value !== false && (e.classList.contains("ripple-surface") || e.classList.add("ripple-surface"));
  },
  unmounted(e) {
    e.removeEventListener("click", (t) => e.waves(t));
  }
};
var xa = {
  name: "MDBBtn"
};
var Ca = defineComponent({
  ...xa,
  props: {
    color: String,
    size: String,
    outline: String,
    rounded: Boolean,
    floating: Boolean,
    toggler: Boolean,
    toggle: Boolean,
    role: {
      type: String,
      default: "button"
    },
    type: {
      type: String,
      default: "button"
    },
    tag: {
      type: String,
      default: "button"
    },
    block: {
      type: Boolean,
      default: false
    },
    ripple: {
      type: [Object, Boolean],
      default: (e) => e.outline || e.color === "light" || e.color === "link" ? { color: "dark" } : true
    },
    picker: Boolean
  },
  emits: ["update:toggle"],
  setup(e, { emit: t }) {
    const a = e, l = ref(a.toggle), n = computed(() => [
      !a.picker && "btn",
      a.color && `btn-${a.color}`,
      a.size && `btn-${a.size}`,
      a.outline && `btn-outline-${a.outline}`,
      a.rounded && "btn-rounded",
      a.floating && "btn-floating",
      a.block && "btn-block",
      l.value && "active"
    ]), o = () => {
      a.toggler && (l.value = !l.value, t("update:toggle", l.value));
    };
    return (r, s) => withDirectives((openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      type: e.type,
      role: e.role,
      class: normalizeClass(n.value),
      onClick: o
    }, {
      default: withCtx(() => [
        renderSlot(r.$slots, "default")
      ]),
      _: 3
    }, 8, ["type", "role", "class"])), [
      [unref(it), e.ripple]
    ]);
  }
});
var Ma = {
  name: "MDBBtnGroup"
};
var Mr = defineComponent({
  ...Ma,
  props: {
    size: String,
    vertical: Boolean,
    role: {
      type: String,
      default: "group"
    },
    tag: {
      type: String,
      default: "div"
    }
  },
  setup(e) {
    const t = e, a = computed(() => [
      t.size && `btn-group-${t.size}`,
      t.vertical ? "btn-group-vertical" : "btn-group"
    ]);
    return (l, n) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(a.value),
      role: e.role
    }, {
      default: withCtx(() => [
        renderSlot(l.$slots, "default")
      ]),
      _: 3
    }, 8, ["class", "role"]));
  }
});
var Va = {
  name: "MDBBtnClose"
};
var Da = defineComponent({
  ...Va,
  props: {
    white: {
      type: Boolean,
      default: false
    }
  },
  setup(e) {
    const t = e, a = computed(() => ["btn-close", t.white && "btn-close-white"]);
    return (l, n) => (openBlock(), createElementBlock("button", {
      class: normalizeClass(a.value),
      "aria-label": "Close"
    }, null, 2));
  }
});
var Oa = {
  name: "MDBCard"
};
var Vr = defineComponent({
  ...Oa,
  props: {
    tag: {
      type: String,
      default: "div"
    },
    border: String,
    bg: String,
    text: [String, Array],
    shadow: String
  },
  setup(e) {
    const t = e, a = computed(() => [
      "card",
      t.border && `border border-${t.border}`,
      t.bg && `bg-${t.bg}`,
      t.shadow && `shadow-${t.shadow}`,
      t.text && l(t.text)
    ]), l = (n) => typeof n == "string" ? `text-${n}` : n.map((o) => `text-${o}`.trim()).join(" ");
    return (n, o) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(a.value)
    }, {
      default: withCtx(() => [
        renderSlot(n.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var Ea = {
  name: "MDBCardBody"
};
var Dr = defineComponent({
  ...Ea,
  props: {
    tag: {
      type: String,
      default: "div"
    },
    text: {
      type: [String, Array]
    }
  },
  setup(e) {
    const t = e, a = computed(() => ["card-body", t.text && l(t.text)]), l = (n) => typeof n == "string" ? `text-${n}` : n.map((o) => `text-${o}`.trim()).join(" ");
    return (n, o) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(a.value)
    }, {
      default: withCtx(() => [
        renderSlot(n.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var Na = {
  name: "MDBCardTitle"
};
var Or = defineComponent({
  ...Na,
  props: {
    tag: {
      type: String,
      default: "h5"
    },
    subtitle: {
      type: Boolean,
      default: false
    }
  },
  setup(e) {
    const t = e, a = computed(() => t.subtitle ? t.tag !== "h5" ? t.tag : "h6" : t.tag), l = computed(() => [t.subtitle ? "card-subtitle" : "card-title"]);
    return (n, o) => (openBlock(), createBlock(resolveDynamicComponent(a.value), {
      class: normalizeClass(l.value)
    }, {
      default: withCtx(() => [
        renderSlot(n.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var Ta = {
  name: "MDBCardText"
};
var Er = defineComponent({
  ...Ta,
  props: {
    tag: {
      type: String,
      default: "p"
    }
  },
  setup(e) {
    const t = computed(() => ["card-text"]);
    return (a, l) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(t.value)
    }, {
      default: withCtx(() => [
        renderSlot(a.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var Aa = {
  name: "MDBCardImg"
};
var Nr = defineComponent({
  ...Aa,
  props: {
    tag: {
      type: String,
      default: "img"
    },
    src: {
      type: String,
      required: true
    },
    alt: String,
    top: {
      type: Boolean,
      default: false
    },
    bottom: {
      type: Boolean,
      default: false
    },
    fluid: {
      type: Boolean,
      default: false
    },
    overlay: {
      type: Boolean,
      default: false
    }
  },
  setup(e) {
    const t = e, a = computed(() => [
      t.top && "card-img-top",
      t.bottom && "card-img-bottom",
      t.fluid && "img-fluid",
      t.overlay && "card-img",
      !t.top && !t.bottom && !t.fluid && !t.overlay && "card-img"
    ]);
    return (l, n) => (openBlock(), createElementBlock(Fragment, null, [
      (openBlock(), createBlock(resolveDynamicComponent(e.tag), mergeProps({
        src: e.src,
        alt: e.alt,
        class: a.value
      }, l.$attrs), null, 16, ["src", "alt", "class"])),
      e.overlay ? (openBlock(), createElementBlock("div", mergeProps({
        key: 0,
        class: "card-img-overlay"
      }, l.$attrs), [
        renderSlot(l.$slots, "default")
      ], 16)) : createCommentVNode("", true)
    ], 64));
  }
});
var La = {
  name: "MDBCardHeader"
};
var Tr = defineComponent({
  ...La,
  props: {
    tag: {
      type: String,
      default: "div"
    },
    bg: String,
    border: String
  },
  setup(e) {
    const t = e, a = computed(() => [
      "card-header",
      t.border && `border-${t.border}`,
      t.bg && `bg-${t.bg}`
    ]);
    return (l, n) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(a.value)
    }, {
      default: withCtx(() => [
        renderSlot(l.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var _a = {
  name: "MDBCardFooter"
};
var Ar = defineComponent({
  ..._a,
  props: {
    tag: {
      type: String,
      default: "div"
    },
    bg: String,
    border: String
  },
  setup(e) {
    const t = e, a = computed(() => [
      "card-footer",
      t.border && `border-${t.border}`,
      t.bg && `bg-${t.bg}`
    ]);
    return (l, n) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(a.value)
    }, {
      default: withCtx(() => [
        renderSlot(l.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var Ia = {
  name: "MDBCardLink"
};
var Lr = defineComponent({
  ...Ia,
  props: {
    tag: {
      type: String,
      default: "a"
    }
  },
  setup(e) {
    const t = computed(() => ["card-link"]);
    return (a, l) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(t.value)
    }, {
      default: withCtx(() => [
        renderSlot(a.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var Pa = {
  name: "MDBCardGroup"
};
var _r = defineComponent({
  ...Pa,
  props: {
    tag: {
      type: String,
      default: "div"
    }
  },
  setup(e) {
    const t = computed(() => ["card-group"]);
    return (a, l) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(t.value)
    }, {
      default: withCtx(() => [
        renderSlot(a.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var Fa = {
  key: 0,
  class: "carousel-indicators"
};
var Ra = ["ariaCurrent", "ariaLabel", "onClick"];
var qa = {
  key: 0,
  class: "img-fluid",
  autoplay: "",
  loop: "",
  muted: ""
};
var ja = ["src", "type"];
var za = ["src", "alt"];
var Wa = { key: 0 };
var Ha = { key: 1 };
var Ga = createBaseVNode("span", {
  class: "carousel-control-prev-icon",
  "aria-hidden": "true"
}, null, -1);
var Ua = createBaseVNode("span", { class: "visually-hidden" }, "Previous", -1);
var Xa = [
  Ga,
  Ua
];
var Ya = createBaseVNode("span", {
  class: "carousel-control-next-icon",
  "aria-hidden": "true"
}, null, -1);
var Ka = createBaseVNode("span", { class: "visually-hidden" }, "Next", -1);
var Ja = [
  Ya,
  Ka
];
var Qa = {
  name: "MDBCarousel"
};
var Ir = defineComponent({
  ...Qa,
  props: {
    captionsClass: {
      type: String,
      default: "carousel-caption d-none d-md-block"
    },
    controls: {
      type: Boolean,
      default: true
    },
    dark: Boolean,
    fade: Boolean,
    indicators: {
      type: Boolean,
      default: true
    },
    interval: {
      type: [Number, Boolean],
      default: 5e3
    },
    items: Array,
    itemsClass: {
      type: String,
      default: "d-block w-100"
    },
    keyboard: {
      type: Boolean,
      default: true
    },
    modelValue: {
      type: Number,
      default: 0
    },
    pause: {
      type: [String, Boolean],
      default: "hover"
    },
    tag: {
      type: String,
      default: "div"
    },
    touch: {
      type: Boolean,
      default: true
    },
    innerClass: String
  },
  emits: ["update:modelValue"],
  setup(e, { expose: t, emit: a }) {
    const l = e, n = computed(() => [
      "carousel",
      "slide",
      l.fade && "carousel-fade",
      l.dark && "carousel-dark"
    ]), o = computed(() => ["carousel-inner", l.innerClass]), r = ref(l.modelValue), s = ref(null), u = ref(false);
    let c, i = false;
    const m = () => {
      v("prev");
    }, $ = () => {
      v("next");
    }, v = (B) => {
      if (u.value)
        return;
      const j = i;
      i = false, y(B), i = j;
    }, y = (B) => {
      if (i || !s.value)
        return;
      u.value = true;
      const j = S(B), X = h(B), Y = k(X), se = L(X), ie = M(r.value), ue = M(j);
      r.value = j, ue.classList.add(se), a("update:modelValue", r.value), l.interval && w(), setTimeout(() => {
        ie.classList.add(Y), ue.classList.add(Y);
      }, 20), setTimeout(() => {
        ie.classList.remove("active"), ie.classList.remove(Y), ue.classList.remove(Y), ue.classList.remove(se), ue.classList.add("active"), u.value = false;
      }, 600);
    }, S = (B) => {
      const j = l.items || [];
      return B === "prev" && r.value <= 0 ? j.length - 1 : B === "prev" ? r.value - 1 : B === "next" && r.value >= j.length - 1 ? 0 : B === "next" ? r.value + 1 : B;
    }, h = (B) => B === "next" || typeof B == "number" && B > r.value, k = (B) => B ? "carousel-item-start" : "carousel-item-end", L = (B) => B ? "carousel-item-next" : "carousel-item-prev", M = (B) => s.value.querySelectorAll(".carousel-item")[B], w = () => {
      clearInterval(c), c = void 0;
      const B = l.items && l.items[r.value].interval || l.interval;
      c = setInterval(() => {
        y("next");
      }, B);
    }, T = () => {
      l.pause === "hover" && l.interval && (clearInterval(c), c = void 0, i = true);
    }, I = () => {
      l.pause === "hover" && l.interval && (w(), i = false);
    }, R = () => {
      l.keyboard && $();
    }, W = () => {
      l.keyboard && m();
    }, G = !!window.PointerEvent, F = ref(0), E = ref(0), P = (B) => {
      if (!l.touch)
        return;
      const j = B, X = B, Y = B;
      G && (j.pointerType === "pen" || j.pointerType === "touch") ? F.value = X.clientX : F.value = Y.touches[0].clientX;
    }, x = (B) => {
      l.touch && (E.value = B.touches && B.touches.length > 1 ? 0 : B.touches[0].clientX - F.value);
    }, _ = (B) => {
      if (!l.touch)
        return;
      const j = B, X = B;
      G && (j.pointerType === "pen" || j.pointerType === "touch") && (E.value = X.clientX - F.value), K();
    }, K = () => {
      const B = Math.abs(E.value);
      if (B <= 40)
        return;
      const j = B / E.value;
      E.value = 0, j && (j > 0 ? m() : $());
    };
    return onMounted(() => {
      var j;
      const B = (j = s.value) == null ? void 0 : j.querySelectorAll(".carousel-item")[r.value];
      B == null || B.classList.add("active"), l.interval && w();
    }), onUnmounted(() => {
      l.interval && (clearInterval(c), c = void 0);
    }), watch(
      () => l.modelValue,
      (B) => v(B)
    ), t({ next: $, prev: m }), (B, j) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(n.value),
      onMouseenter: T,
      onMouseleave: I,
      onKeydown: [
        withKeys(R, ["right"]),
        withKeys(W, ["left"])
      ],
      onTouchstart: P,
      onTouchmove: x,
      onTouchend: _
    }, {
      default: withCtx(() => [
        e.indicators ? (openBlock(), createElementBlock("div", Fa, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(e.items, (X, Y) => (openBlock(), createElementBlock("button", {
            key: Y,
            type: "button",
            class: normalizeClass(r.value === Y && "active"),
            ariaCurrent: r.value === Y && "true",
            ariaLabel: `Slide ${Y + 1}`,
            onClick: (se) => v(Y)
          }, null, 10, Ra))), 128))
        ])) : createCommentVNode("", true),
        createBaseVNode("div", {
          class: normalizeClass(o.value),
          ref_key: "carouselInnerRef",
          ref: s
        }, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(e.items, (X, Y) => (openBlock(), createElementBlock("div", {
            class: "carousel-item",
            key: Y
          }, [
            X.video ? (openBlock(), createElementBlock("video", qa, [
              createBaseVNode("source", {
                src: X.video,
                type: X.videoType
              }, null, 8, ja)
            ])) : (openBlock(), createElementBlock("img", {
              key: 1,
              src: X.src,
              alt: X.alt,
              class: normalizeClass(e.itemsClass)
            }, null, 10, za)),
            X.label || X.caption ? (openBlock(), createElementBlock("div", {
              key: 2,
              class: normalizeClass(e.captionsClass)
            }, [
              X.label ? (openBlock(), createElementBlock("h5", Wa, toDisplayString(X.label), 1)) : createCommentVNode("", true),
              X.caption ? (openBlock(), createElementBlock("p", Ha, toDisplayString(X.caption), 1)) : createCommentVNode("", true)
            ], 2)) : createCommentVNode("", true)
          ]))), 128))
        ], 2),
        e.controls ? (openBlock(), createElementBlock("button", {
          key: 1,
          onClick: m,
          class: "carousel-control-prev",
          type: "button"
        }, Xa)) : createCommentVNode("", true),
        e.controls ? (openBlock(), createElementBlock("button", {
          key: 2,
          onClick: $,
          class: "carousel-control-next",
          type: "button"
        }, Ja)) : createCommentVNode("", true)
      ]),
      _: 1
    }, 40, ["class", "onKeydown"]));
  }
});
var Za = {
  name: "MDBListGroup"
};
var Pr = defineComponent({
  ...Za,
  props: {
    flush: {
      type: Boolean,
      default: false
    },
    horizontal: {
      type: [Boolean, String],
      default: false
    },
    numbered: Boolean,
    tag: {
      type: String,
      default: "ul"
    },
    light: Boolean,
    small: Boolean
  },
  setup(e) {
    const t = e, a = computed(() => [
      "list-group",
      t.horizontal && l.value,
      t.flush && "list-group-flush",
      t.numbered && "list-group-numbered",
      t.light && "list-group-light",
      t.small && "list-group-small"
    ]), l = computed(() => {
      if (t.horizontal)
        return t.horizontal !== true ? `list-group-horizontal-${t.horizontal}` : "list-group-horizontal";
    });
    return (n, o) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(a.value)
    }, {
      default: withCtx(() => [
        renderSlot(n.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var el = {
  name: "MDBListGroupItem"
};
var Fr = defineComponent({
  ...el,
  props: {
    tag: {
      type: String,
      default: "li"
    },
    active: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    action: {
      type: Boolean,
      default: false
    },
    color: String,
    noBorder: Boolean,
    spacing: {
      type: [Boolean, String],
      default: false
    },
    ripple: {
      type: [Object, Boolean],
      default: false
    }
  },
  setup(e) {
    const t = e, a = computed(() => {
      if (t.spacing)
        return t.spacing !== true ? t.spacing : "px-3";
    }), l = computed(() => [
      "list-group-item",
      t.active && "active",
      t.disabled && "disabled",
      t.action && "list-group-item-action",
      t.color && `list-group-item-${t.color}`,
      t.noBorder && "border-0",
      t.spacing && a.value
    ]);
    return (n, o) => withDirectives((openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(l.value),
      "aria-current": e.active ? true : null,
      "aria-disabled": e.disabled ? true : null,
      disabled: e.disabled ? true : null
    }, {
      default: withCtx(() => [
        renderSlot(n.$slots, "default")
      ]),
      _: 3
    }, 8, ["class", "aria-current", "aria-disabled", "disabled"])), [
      [unref(it), t.ripple]
    ]);
  }
});
var tl = {
  name: "MDBProgress"
};
var Rr = defineComponent({
  ...tl,
  props: {
    tag: {
      type: String,
      default: "div"
    },
    height: Number
  },
  setup(e) {
    const t = e, a = computed(() => ["progress"]), l = computed(() => ({ height: t.height + "px" }));
    return (n, o) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(a.value),
      style: normalizeStyle(l.value)
    }, {
      default: withCtx(() => [
        renderSlot(n.$slots, "default")
      ]),
      _: 3
    }, 8, ["class", "style"]));
  }
});
var al = {
  name: "MDBProgressBar"
};
var qr = defineComponent({
  ...al,
  props: {
    tag: {
      type: String,
      default: "div"
    },
    bg: String,
    striped: {
      type: Boolean,
      default: false
    },
    animated: {
      type: Boolean,
      default: false
    },
    value: {
      type: Number,
      default: 0
    },
    min: {
      type: Number,
      default: 0
    },
    max: {
      type: Number,
      default: 100
    }
  },
  setup(e) {
    const t = e, a = computed(() => [
      "progress-bar",
      t.bg && `bg-${t.bg}`,
      t.striped && "progress-bar-striped",
      t.animated && "progress-bar-animated"
    ]);
    return (l, n) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(a.value),
      role: "progressbar",
      "aria-valuenow": e.value,
      "aria-valuemin": e.min,
      "aria-valuemax": e.max,
      style: normalizeStyle([
        {
          width: (e.value - e.min) / (e.max - e.min) * 100 + "%"
        }
      ])
    }, {
      default: withCtx(() => [
        renderSlot(l.$slots, "default")
      ]),
      _: 3
    }, 8, ["class", "aria-valuenow", "aria-valuemin", "aria-valuemax", "style"]));
  }
});
var ll = createBaseVNode("span", { class: "visually-hidden" }, "Loading...", -1);
var nl = {
  name: "MDBSpinner"
};
var jr = defineComponent({
  ...nl,
  props: {
    tag: {
      type: String,
      default: "div"
    },
    grow: {
      type: Boolean,
      default: false
    },
    color: String,
    size: String
  },
  setup(e) {
    const t = e, a = computed(() => [
      t.grow ? "spinner-grow" : "spinner-border",
      t.color && `text-${t.color}`,
      `${t.size ? t.grow ? "spinner-grow-" + t.size : "spinner-border-" + t.size : ""}`
    ]);
    return (l, n) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(a.value),
      role: "status"
    }, {
      default: withCtx(() => [
        ll,
        renderSlot(l.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var ol = 1e6;
var xe = (e) => {
  do
    e += Math.floor(Math.random() * ol);
  while (document.getElementById(e));
  return e;
};
var rl = /\..*/;
var sl = {
  mouseenter: "mouseover",
  mouseleave: "mouseout"
};
var il = [
  "click",
  "dblclick",
  "mouseup",
  "mousedown",
  "contextmenu",
  "mousewheel",
  "DOMMouseScroll",
  "mouseover",
  "mouseout",
  "mousemove",
  "selectstart",
  "selectend",
  "keydown",
  "keypress",
  "keyup",
  "orientationchange",
  "touchstart",
  "touchmove",
  "touchend",
  "touchcancel",
  "pointerdown",
  "pointermove",
  "pointerup",
  "pointerleave",
  "pointercancel",
  "gesturestart",
  "gesturechange",
  "gestureend",
  "focus",
  "blur",
  "change",
  "reset",
  "select",
  "submit",
  "focusin",
  "focusout",
  "load",
  "unload",
  "beforeunload",
  "resize",
  "move",
  "DOMContentLoaded",
  "readystatechange",
  "error",
  "abort",
  "scroll"
];
function Gt(e, t, a) {
  const l = typeof t == "string", n = l ? a : t;
  let o = e.replace(rl, "");
  const r = sl[o];
  return r && (o = r), il.indexOf(o) > -1 || (o = e), [l, n, o];
}
function ul(e, t, a, l) {
  if (typeof t != "string" || !e)
    return;
  a || (a = l, l = void 0);
  const [n, o, r] = Gt(
    t,
    a,
    l
  );
  e.addEventListener(
    r,
    o,
    n
  );
}
function cl(e, t, a, l) {
  e.removeEventListener(
    t,
    a,
    !!l
  );
}
var ne = function(e, t, a, l = void 0) {
  ul(e, t, a, l);
};
var ae = function(e, t, a, l = void 0) {
  if (typeof t != "string" || !e)
    return;
  const [n, o, r] = Gt(
    t,
    a,
    l
  );
  cl(
    e,
    r,
    o,
    n ? a : void 0
  );
};
var dl = {
  name: "MDBCollapse"
};
var fl = defineComponent({
  ...dl,
  props: {
    tag: {
      type: String,
      default: "div"
    },
    modelValue: Boolean,
    id: String,
    collapseClass: String,
    duration: {
      type: Number,
      default: 300
    },
    sidenav: {
      type: Boolean,
      default: false
    },
    horizontal: {
      type: Boolean,
      default: false
    }
  },
  emits: ["update:modelValue"],
  setup(e, { expose: t, emit: a }) {
    const l = e, n = ref(null), o = ref(l.modelValue), r = computed(() => [
      s.value,
      l.collapseClass,
      h && h.value ? "navbar-collapse" : "",
      k.value,
      l.horizontal && "collapse-horizontal"
    ]), s = computed(() => l.sidenav ? "sidenav-collapse" : o.value ? "collapse" : null), u = inject("accordionState", null), c = inject(
      "incrementAccordionItemsCount",
      false
    ), i = inject(
      "setAccordionActiveItem",
      false
    ), m = ref(null), $ = () => {
      m.value !== null && o.value && i && i(m.value);
    };
    watchEffect(
      () => {
        u && u.active !== m.value && a("update:modelValue", false);
      },
      { flush: "post" }
    ), onMounted(() => {
      o.value && n.value && (n.value.style.height = n.value.scrollHeight + "px", n.value.style.width = n.value.scrollWidth + "px"), u && (m.value = c ? c() : 0, o.value && i && i(m.value));
    });
    let v = false;
    const y = ref(0);
    watch(
      () => l.modelValue,
      (x) => {
        if (v) {
          clearInterval(y.value), y.value = setTimeout(() => {
            a("update:modelValue", o.value);
          }, l.duration);
          return;
        }
        o.value = x, u && $();
      }
    ), provide("openCollapse", () => {
      a("update:modelValue", true);
    });
    const h = inject(
      "navbarFlexWrapValue",
      false
    ), k = computed(() => !h || h.value === "wrap" && o.value ? "show" : (h.value === "nowrap" && o.value, false)), L = (x, _) => {
      _ === "null" && l.modelValue ? o.value = true : (_ === "null" && !l.modelValue || _ === "nowrap") && (o.value = false);
    };
    watch(
      () => h && h.value,
      (x, _) => {
        x === "nowrap" ? o.value = true : x === "wrap" && L(x, _), a("update:modelValue", o.value);
      },
      { immediate: true }
    );
    const M = computed(() => l.id ? l.id : xe("collapsibleContent-")), w = (x) => {
      const _ = x;
      l.horizontal ? _.style.width = "0" : _.style.height = "0", _.style.transitionDuration = l.duration + "ms", v = true;
    }, T = (x) => {
      var K, B;
      const _ = x;
      l.horizontal ? _.style.width = ((K = n.value) == null ? void 0 : K.scrollWidth) + "px" : _.style.height = ((B = n.value) == null ? void 0 : B.scrollHeight) + "px";
    }, I = (x) => {
      const _ = x;
      _.classList.contains("show") || _.classList.add("show"), l.horizontal ? _.style.width = "" : _.style.height = "", v = false;
    }, R = (x) => {
      var K, B;
      const _ = x;
      l.horizontal ? _.style.width || (_.classList.add("show"), _.style.width = ((K = n.value) == null ? void 0 : K.scrollWidth) + "px") : _.style.height || (_.classList.add("show"), _.style.height = ((B = n.value) == null ? void 0 : B.scrollHeight) + "px"), v = true;
    }, W = (x) => {
      const _ = x;
      l.horizontal ? _.style.width = "0px" : _.style.height = "0px";
    }, G = (x) => {
      x.classList.add("collapse"), v = false;
    }, F = ref(null), E = ref(false), P = () => {
      if (!o.value || E.value)
        return;
      E.value = true;
      const x = window.innerWidth;
      F.value = x, setTimeout(() => {
        E.value = false;
      }, 100);
    };
    return onMounted(() => {
      F.value = window.innerWidth, ne(window, "resize", P);
    }), onUnmounted(() => {
      ae(window, "resize", P);
    }), t({ collapse: n }), (x, _) => (openBlock(), createBlock(Transition, {
      onBeforeEnter: w,
      onEnter: T,
      onAfterEnter: I,
      onBeforeLeave: R,
      onLeave: W,
      onAfterLeave: G,
      "enter-active-class": "collapsing",
      "leave-active-class": "collapsing show"
    }, {
      default: withCtx(() => [
        withDirectives((openBlock(), createBlock(resolveDynamicComponent(e.tag), {
          class: normalizeClass(r.value),
          id: M.value,
          ref_key: "collapse",
          ref: n
        }, {
          default: withCtx(() => [
            renderSlot(x.$slots, "default")
          ]),
          _: 3
        }, 8, ["class", "id"])), [
          [vShow, o.value]
        ])
      ]),
      _: 3
    }));
  }
});
var oe = "top";
var ve = "bottom";
var pe = "right";
var re = "left";
var tt = "auto";
var Ge = [oe, ve, pe, re];
var Ae = "start";
var We = "end";
var vl = "clippingParents";
var Ut = "viewport";
var Fe = "popper";
var pl = "reference";
var Dt = Ge.reduce(function(e, t) {
  return e.concat([t + "-" + Ae, t + "-" + We]);
}, []);
var Xt = [].concat(Ge, [tt]).reduce(function(e, t) {
  return e.concat([t, t + "-" + Ae, t + "-" + We]);
}, []);
var ml = "beforeRead";
var gl = "read";
var hl = "afterRead";
var yl = "beforeMain";
var bl = "main";
var wl = "afterMain";
var kl = "beforeWrite";
var Bl = "write";
var $l = "afterWrite";
var rt = [ml, gl, hl, yl, bl, wl, kl, Bl, $l];
function Be(e) {
  return e ? (e.nodeName || "").toLowerCase() : null;
}
function ye(e) {
  if (e == null)
    return window;
  if (e.toString() !== "[object Window]") {
    var t = e.ownerDocument;
    return t && t.defaultView || window;
  }
  return e;
}
function Le(e) {
  var t = ye(e).Element;
  return e instanceof t || e instanceof Element;
}
function ce(e) {
  var t = ye(e).HTMLElement;
  return e instanceof t || e instanceof HTMLElement;
}
function ut(e) {
  if (typeof ShadowRoot > "u")
    return false;
  var t = ye(e).ShadowRoot;
  return e instanceof t || e instanceof ShadowRoot;
}
function Sl(e) {
  var t = e.state;
  Object.keys(t.elements).forEach(function(a) {
    var l = t.styles[a] || {}, n = t.attributes[a] || {}, o = t.elements[a];
    !ce(o) || !Be(o) || (Object.assign(o.style, l), Object.keys(n).forEach(function(r) {
      var s = n[r];
      s === false ? o.removeAttribute(r) : o.setAttribute(r, s === true ? "" : s);
    }));
  });
}
function xl(e) {
  var t = e.state, a = {
    popper: {
      position: t.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  return Object.assign(t.elements.popper.style, a.popper), t.styles = a, t.elements.arrow && Object.assign(t.elements.arrow.style, a.arrow), function() {
    Object.keys(t.elements).forEach(function(l) {
      var n = t.elements[l], o = t.attributes[l] || {}, r = Object.keys(t.styles.hasOwnProperty(l) ? t.styles[l] : a[l]), s = r.reduce(function(u, c) {
        return u[c] = "", u;
      }, {});
      !ce(n) || !Be(n) || (Object.assign(n.style, s), Object.keys(o).forEach(function(u) {
        n.removeAttribute(u);
      }));
    });
  };
}
var Cl = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: Sl,
  effect: xl,
  requires: ["computeStyles"]
};
function me(e) {
  return e.split("-")[0];
}
var Ee = Math.max;
var Je = Math.min;
var _e = Math.round;
function Ie(e, t) {
  t === void 0 && (t = false);
  var a = e.getBoundingClientRect(), l = 1, n = 1;
  if (ce(e) && t) {
    var o = e.offsetHeight, r = e.offsetWidth;
    r > 0 && (l = _e(a.width) / r || 1), o > 0 && (n = _e(a.height) / o || 1);
  }
  return {
    width: a.width / l,
    height: a.height / n,
    top: a.top / n,
    right: a.right / l,
    bottom: a.bottom / n,
    left: a.left / l,
    x: a.left / l,
    y: a.top / n
  };
}
function ct(e) {
  var t = Ie(e), a = e.offsetWidth, l = e.offsetHeight;
  return Math.abs(t.width - a) <= 1 && (a = t.width), Math.abs(t.height - l) <= 1 && (l = t.height), {
    x: e.offsetLeft,
    y: e.offsetTop,
    width: a,
    height: l
  };
}
function Yt(e, t) {
  var a = t.getRootNode && t.getRootNode();
  if (e.contains(t))
    return true;
  if (a && ut(a)) {
    var l = t;
    do {
      if (l && e.isSameNode(l))
        return true;
      l = l.parentNode || l.host;
    } while (l);
  }
  return false;
}
function he(e) {
  return ye(e).getComputedStyle(e);
}
function Ml(e) {
  return ["table", "td", "th"].indexOf(Be(e)) >= 0;
}
function Ce(e) {
  return ((Le(e) ? e.ownerDocument : (
    // $FlowFixMe[prop-missing]
    e.document
  )) || window.document).documentElement;
}
function at(e) {
  return Be(e) === "html" ? e : (
    // this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    e.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    e.parentNode || // DOM Element detected
    (ut(e) ? e.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    Ce(e)
  );
}
function Ot(e) {
  return !ce(e) || // https://github.com/popperjs/popper-core/issues/837
  he(e).position === "fixed" ? null : e.offsetParent;
}
function Vl(e) {
  var t = navigator.userAgent.toLowerCase().indexOf("firefox") !== -1, a = navigator.userAgent.indexOf("Trident") !== -1;
  if (a && ce(e)) {
    var l = he(e);
    if (l.position === "fixed")
      return null;
  }
  var n = at(e);
  for (ut(n) && (n = n.host); ce(n) && ["html", "body"].indexOf(Be(n)) < 0; ) {
    var o = he(n);
    if (o.transform !== "none" || o.perspective !== "none" || o.contain === "paint" || ["transform", "perspective"].indexOf(o.willChange) !== -1 || t && o.willChange === "filter" || t && o.filter && o.filter !== "none")
      return n;
    n = n.parentNode;
  }
  return null;
}
function Ue(e) {
  for (var t = ye(e), a = Ot(e); a && Ml(a) && he(a).position === "static"; )
    a = Ot(a);
  return a && (Be(a) === "html" || Be(a) === "body" && he(a).position === "static") ? t : a || Vl(e) || t;
}
function dt(e) {
  return ["top", "bottom"].indexOf(e) >= 0 ? "x" : "y";
}
function Re(e, t, a) {
  return Ee(e, Je(t, a));
}
function Dl(e, t, a) {
  var l = Re(e, t, a);
  return l > a ? a : l;
}
function Kt() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}
function Jt(e) {
  return Object.assign({}, Kt(), e);
}
function Qt(e, t) {
  return t.reduce(function(a, l) {
    return a[l] = e, a;
  }, {});
}
var Ol = function(t, a) {
  return t = typeof t == "function" ? t(Object.assign({}, a.rects, {
    placement: a.placement
  })) : t, Jt(typeof t != "number" ? t : Qt(t, Ge));
};
function El(e) {
  var t, a = e.state, l = e.name, n = e.options, o = a.elements.arrow, r = a.modifiersData.popperOffsets, s = me(a.placement), u = dt(s), c = [re, pe].indexOf(s) >= 0, i = c ? "height" : "width";
  if (!(!o || !r)) {
    var m = Ol(n.padding, a), $ = ct(o), v = u === "y" ? oe : re, y = u === "y" ? ve : pe, S = a.rects.reference[i] + a.rects.reference[u] - r[u] - a.rects.popper[i], h = r[u] - a.rects.reference[u], k = Ue(o), L = k ? u === "y" ? k.clientHeight || 0 : k.clientWidth || 0 : 0, M = S / 2 - h / 2, w = m[v], T = L - $[i] - m[y], I = L / 2 - $[i] / 2 + M, R = Re(w, I, T), W = u;
    a.modifiersData[l] = (t = {}, t[W] = R, t.centerOffset = R - I, t);
  }
}
function Nl(e) {
  var t = e.state, a = e.options, l = a.element, n = l === void 0 ? "[data-popper-arrow]" : l;
  if (n != null && !(typeof n == "string" && (n = t.elements.popper.querySelector(n), !n))) {
    if (ce(n) || console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" ")), !Yt(t.elements.popper, n)) {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
      return;
    }
    t.elements.arrow = n;
  }
}
var Tl = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: El,
  effect: Nl,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};
function Pe(e) {
  return e.split("-")[1];
}
var Al = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function Ll(e) {
  var t = e.x, a = e.y, l = window, n = l.devicePixelRatio || 1;
  return {
    x: _e(t * n) / n || 0,
    y: _e(a * n) / n || 0
  };
}
function Et(e) {
  var t, a = e.popper, l = e.popperRect, n = e.placement, o = e.variation, r = e.offsets, s = e.position, u = e.gpuAcceleration, c = e.adaptive, i = e.roundOffsets, m = e.isFixed, $ = r.x, v = $ === void 0 ? 0 : $, y = r.y, S = y === void 0 ? 0 : y, h = typeof i == "function" ? i({
    x: v,
    y: S
  }) : {
    x: v,
    y: S
  };
  v = h.x, S = h.y;
  var k = r.hasOwnProperty("x"), L = r.hasOwnProperty("y"), M = re, w = oe, T = window;
  if (c) {
    var I = Ue(a), R = "clientHeight", W = "clientWidth";
    if (I === ye(a) && (I = Ce(a), he(I).position !== "static" && s === "absolute" && (R = "scrollHeight", W = "scrollWidth")), I = I, n === oe || (n === re || n === pe) && o === We) {
      w = ve;
      var G = m && I === T && T.visualViewport ? T.visualViewport.height : (
        // $FlowFixMe[prop-missing]
        I[R]
      );
      S -= G - l.height, S *= u ? 1 : -1;
    }
    if (n === re || (n === oe || n === ve) && o === We) {
      M = pe;
      var F = m && I === T && T.visualViewport ? T.visualViewport.width : (
        // $FlowFixMe[prop-missing]
        I[W]
      );
      v -= F - l.width, v *= u ? 1 : -1;
    }
  }
  var E = Object.assign({
    position: s
  }, c && Al), P = i === true ? Ll({
    x: v,
    y: S
  }) : {
    x: v,
    y: S
  };
  if (v = P.x, S = P.y, u) {
    var x;
    return Object.assign({}, E, (x = {}, x[w] = L ? "0" : "", x[M] = k ? "0" : "", x.transform = (T.devicePixelRatio || 1) <= 1 ? "translate(" + v + "px, " + S + "px)" : "translate3d(" + v + "px, " + S + "px, 0)", x));
  }
  return Object.assign({}, E, (t = {}, t[w] = L ? S + "px" : "", t[M] = k ? v + "px" : "", t.transform = "", t));
}
function _l(e) {
  var t = e.state, a = e.options, l = a.gpuAcceleration, n = l === void 0 ? true : l, o = a.adaptive, r = o === void 0 ? true : o, s = a.roundOffsets, u = s === void 0 ? true : s;
  if (true) {
    var c = he(t.elements.popper).transitionProperty || "";
    r && ["transform", "top", "right", "bottom", "left"].some(function(m) {
      return c.indexOf(m) >= 0;
    }) && console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', `

`, 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", `

`, "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
  }
  var i = {
    placement: me(t.placement),
    variation: Pe(t.placement),
    popper: t.elements.popper,
    popperRect: t.rects.popper,
    gpuAcceleration: n,
    isFixed: t.options.strategy === "fixed"
  };
  t.modifiersData.popperOffsets != null && (t.styles.popper = Object.assign({}, t.styles.popper, Et(Object.assign({}, i, {
    offsets: t.modifiersData.popperOffsets,
    position: t.options.strategy,
    adaptive: r,
    roundOffsets: u
  })))), t.modifiersData.arrow != null && (t.styles.arrow = Object.assign({}, t.styles.arrow, Et(Object.assign({}, i, {
    offsets: t.modifiersData.arrow,
    position: "absolute",
    adaptive: false,
    roundOffsets: u
  })))), t.attributes.popper = Object.assign({}, t.attributes.popper, {
    "data-popper-placement": t.placement
  });
}
var Il = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: _l,
  data: {}
};
var Ye = {
  passive: true
};
function Pl(e) {
  var t = e.state, a = e.instance, l = e.options, n = l.scroll, o = n === void 0 ? true : n, r = l.resize, s = r === void 0 ? true : r, u = ye(t.elements.popper), c = [].concat(t.scrollParents.reference, t.scrollParents.popper);
  return o && c.forEach(function(i) {
    i.addEventListener("scroll", a.update, Ye);
  }), s && u.addEventListener("resize", a.update, Ye), function() {
    o && c.forEach(function(i) {
      i.removeEventListener("scroll", a.update, Ye);
    }), s && u.removeEventListener("resize", a.update, Ye);
  };
}
var Fl = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function() {
  },
  effect: Pl,
  data: {}
};
var Rl = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function Ke(e) {
  return e.replace(/left|right|bottom|top/g, function(t) {
    return Rl[t];
  });
}
var ql = {
  start: "end",
  end: "start"
};
function Nt(e) {
  return e.replace(/start|end/g, function(t) {
    return ql[t];
  });
}
function ft(e) {
  var t = ye(e), a = t.pageXOffset, l = t.pageYOffset;
  return {
    scrollLeft: a,
    scrollTop: l
  };
}
function vt(e) {
  return Ie(Ce(e)).left + ft(e).scrollLeft;
}
function jl(e) {
  var t = ye(e), a = Ce(e), l = t.visualViewport, n = a.clientWidth, o = a.clientHeight, r = 0, s = 0;
  return l && (n = l.width, o = l.height, /^((?!chrome|android).)*safari/i.test(navigator.userAgent) || (r = l.offsetLeft, s = l.offsetTop)), {
    width: n,
    height: o,
    x: r + vt(e),
    y: s
  };
}
function zl(e) {
  var t, a = Ce(e), l = ft(e), n = (t = e.ownerDocument) == null ? void 0 : t.body, o = Ee(a.scrollWidth, a.clientWidth, n ? n.scrollWidth : 0, n ? n.clientWidth : 0), r = Ee(a.scrollHeight, a.clientHeight, n ? n.scrollHeight : 0, n ? n.clientHeight : 0), s = -l.scrollLeft + vt(e), u = -l.scrollTop;
  return he(n || a).direction === "rtl" && (s += Ee(a.clientWidth, n ? n.clientWidth : 0) - o), {
    width: o,
    height: r,
    x: s,
    y: u
  };
}
function pt(e) {
  var t = he(e), a = t.overflow, l = t.overflowX, n = t.overflowY;
  return /auto|scroll|overlay|hidden/.test(a + n + l);
}
function Zt(e) {
  return ["html", "body", "#document"].indexOf(Be(e)) >= 0 ? e.ownerDocument.body : ce(e) && pt(e) ? e : Zt(at(e));
}
function qe(e, t) {
  var a;
  t === void 0 && (t = []);
  var l = Zt(e), n = l === ((a = e.ownerDocument) == null ? void 0 : a.body), o = ye(l), r = n ? [o].concat(o.visualViewport || [], pt(l) ? l : []) : l, s = t.concat(r);
  return n ? s : (
    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    s.concat(qe(at(r)))
  );
}
function st(e) {
  return Object.assign({}, e, {
    left: e.x,
    top: e.y,
    right: e.x + e.width,
    bottom: e.y + e.height
  });
}
function Wl(e) {
  var t = Ie(e);
  return t.top = t.top + e.clientTop, t.left = t.left + e.clientLeft, t.bottom = t.top + e.clientHeight, t.right = t.left + e.clientWidth, t.width = e.clientWidth, t.height = e.clientHeight, t.x = t.left, t.y = t.top, t;
}
function Tt(e, t) {
  return t === Ut ? st(jl(e)) : Le(t) ? Wl(t) : st(zl(Ce(e)));
}
function Hl(e) {
  var t = qe(at(e)), a = ["absolute", "fixed"].indexOf(he(e).position) >= 0, l = a && ce(e) ? Ue(e) : e;
  return Le(l) ? t.filter(function(n) {
    return Le(n) && Yt(n, l) && Be(n) !== "body";
  }) : [];
}
function Gl(e, t, a) {
  var l = t === "clippingParents" ? Hl(e) : [].concat(t), n = [].concat(l, [a]), o = n[0], r = n.reduce(function(s, u) {
    var c = Tt(e, u);
    return s.top = Ee(c.top, s.top), s.right = Je(c.right, s.right), s.bottom = Je(c.bottom, s.bottom), s.left = Ee(c.left, s.left), s;
  }, Tt(e, o));
  return r.width = r.right - r.left, r.height = r.bottom - r.top, r.x = r.left, r.y = r.top, r;
}
function ea(e) {
  var t = e.reference, a = e.element, l = e.placement, n = l ? me(l) : null, o = l ? Pe(l) : null, r = t.x + t.width / 2 - a.width / 2, s = t.y + t.height / 2 - a.height / 2, u;
  switch (n) {
    case oe:
      u = {
        x: r,
        y: t.y - a.height
      };
      break;
    case ve:
      u = {
        x: r,
        y: t.y + t.height
      };
      break;
    case pe:
      u = {
        x: t.x + t.width,
        y: s
      };
      break;
    case re:
      u = {
        x: t.x - a.width,
        y: s
      };
      break;
    default:
      u = {
        x: t.x,
        y: t.y
      };
  }
  var c = n ? dt(n) : null;
  if (c != null) {
    var i = c === "y" ? "height" : "width";
    switch (o) {
      case Ae:
        u[c] = u[c] - (t[i] / 2 - a[i] / 2);
        break;
      case We:
        u[c] = u[c] + (t[i] / 2 - a[i] / 2);
        break;
    }
  }
  return u;
}
function He(e, t) {
  t === void 0 && (t = {});
  var a = t, l = a.placement, n = l === void 0 ? e.placement : l, o = a.boundary, r = o === void 0 ? vl : o, s = a.rootBoundary, u = s === void 0 ? Ut : s, c = a.elementContext, i = c === void 0 ? Fe : c, m = a.altBoundary, $ = m === void 0 ? false : m, v = a.padding, y = v === void 0 ? 0 : v, S = Jt(typeof y != "number" ? y : Qt(y, Ge)), h = i === Fe ? pl : Fe, k = e.rects.popper, L = e.elements[$ ? h : i], M = Gl(Le(L) ? L : L.contextElement || Ce(e.elements.popper), r, u), w = Ie(e.elements.reference), T = ea({
    reference: w,
    element: k,
    strategy: "absolute",
    placement: n
  }), I = st(Object.assign({}, k, T)), R = i === Fe ? I : w, W = {
    top: M.top - R.top + S.top,
    bottom: R.bottom - M.bottom + S.bottom,
    left: M.left - R.left + S.left,
    right: R.right - M.right + S.right
  }, G = e.modifiersData.offset;
  if (i === Fe && G) {
    var F = G[n];
    Object.keys(W).forEach(function(E) {
      var P = [pe, ve].indexOf(E) >= 0 ? 1 : -1, x = [oe, ve].indexOf(E) >= 0 ? "y" : "x";
      W[E] += F[x] * P;
    });
  }
  return W;
}
function Ul(e, t) {
  t === void 0 && (t = {});
  var a = t, l = a.placement, n = a.boundary, o = a.rootBoundary, r = a.padding, s = a.flipVariations, u = a.allowedAutoPlacements, c = u === void 0 ? Xt : u, i = Pe(l), m = i ? s ? Dt : Dt.filter(function(y) {
    return Pe(y) === i;
  }) : Ge, $ = m.filter(function(y) {
    return c.indexOf(y) >= 0;
  });
  $.length === 0 && ($ = m, console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" ")));
  var v = $.reduce(function(y, S) {
    return y[S] = He(e, {
      placement: S,
      boundary: n,
      rootBoundary: o,
      padding: r
    })[me(S)], y;
  }, {});
  return Object.keys(v).sort(function(y, S) {
    return v[y] - v[S];
  });
}
function Xl(e) {
  if (me(e) === tt)
    return [];
  var t = Ke(e);
  return [Nt(e), t, Nt(t)];
}
function Yl(e) {
  var t = e.state, a = e.options, l = e.name;
  if (!t.modifiersData[l]._skip) {
    for (var n = a.mainAxis, o = n === void 0 ? true : n, r = a.altAxis, s = r === void 0 ? true : r, u = a.fallbackPlacements, c = a.padding, i = a.boundary, m = a.rootBoundary, $ = a.altBoundary, v = a.flipVariations, y = v === void 0 ? true : v, S = a.allowedAutoPlacements, h = t.options.placement, k = me(h), L = k === h, M = u || (L || !y ? [Ke(h)] : Xl(h)), w = [h].concat(M).reduce(function(be, we) {
      return be.concat(me(we) === tt ? Ul(t, {
        placement: we,
        boundary: i,
        rootBoundary: m,
        padding: c,
        flipVariations: y,
        allowedAutoPlacements: S
      }) : we);
    }, []), T = t.rects.reference, I = t.rects.popper, R = /* @__PURE__ */ new Map(), W = true, G = w[0], F = 0; F < w.length; F++) {
      var E = w[F], P = me(E), x = Pe(E) === Ae, _ = [oe, ve].indexOf(P) >= 0, K = _ ? "width" : "height", B = He(t, {
        placement: E,
        boundary: i,
        rootBoundary: m,
        altBoundary: $,
        padding: c
      }), j = _ ? x ? pe : re : x ? ve : oe;
      T[K] > I[K] && (j = Ke(j));
      var X = Ke(j), Y = [];
      if (o && Y.push(B[P] <= 0), s && Y.push(B[j] <= 0, B[X] <= 0), Y.every(function(be) {
        return be;
      })) {
        G = E, W = false;
        break;
      }
      R.set(E, Y);
    }
    if (W)
      for (var se = y ? 3 : 1, ie = function(we) {
        var U = w.find(function(J) {
          var Me = R.get(J);
          if (Me)
            return Me.slice(0, we).every(function(lt) {
              return lt;
            });
        });
        if (U)
          return G = U, "break";
      }, ue = se; ue > 0; ue--) {
        var Te = ie(ue);
        if (Te === "break")
          break;
      }
    t.placement !== G && (t.modifiersData[l]._skip = true, t.placement = G, t.reset = true);
  }
}
var Kl = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: Yl,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};
function At(e, t, a) {
  return a === void 0 && (a = {
    x: 0,
    y: 0
  }), {
    top: e.top - t.height - a.y,
    right: e.right - t.width + a.x,
    bottom: e.bottom - t.height + a.y,
    left: e.left - t.width - a.x
  };
}
function Lt(e) {
  return [oe, pe, ve, re].some(function(t) {
    return e[t] >= 0;
  });
}
function Jl(e) {
  var t = e.state, a = e.name, l = t.rects.reference, n = t.rects.popper, o = t.modifiersData.preventOverflow, r = He(t, {
    elementContext: "reference"
  }), s = He(t, {
    altBoundary: true
  }), u = At(r, l), c = At(s, n, o), i = Lt(u), m = Lt(c);
  t.modifiersData[a] = {
    referenceClippingOffsets: u,
    popperEscapeOffsets: c,
    isReferenceHidden: i,
    hasPopperEscaped: m
  }, t.attributes.popper = Object.assign({}, t.attributes.popper, {
    "data-popper-reference-hidden": i,
    "data-popper-escaped": m
  });
}
var Ql = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: Jl
};
function Zl(e, t, a) {
  var l = me(e), n = [re, oe].indexOf(l) >= 0 ? -1 : 1, o = typeof a == "function" ? a(Object.assign({}, t, {
    placement: e
  })) : a, r = o[0], s = o[1];
  return r = r || 0, s = (s || 0) * n, [re, pe].indexOf(l) >= 0 ? {
    x: s,
    y: r
  } : {
    x: r,
    y: s
  };
}
function en(e) {
  var t = e.state, a = e.options, l = e.name, n = a.offset, o = n === void 0 ? [0, 0] : n, r = Xt.reduce(function(i, m) {
    return i[m] = Zl(m, t.rects, o), i;
  }, {}), s = r[t.placement], u = s.x, c = s.y;
  t.modifiersData.popperOffsets != null && (t.modifiersData.popperOffsets.x += u, t.modifiersData.popperOffsets.y += c), t.modifiersData[l] = r;
}
var tn = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: en
};
function an(e) {
  var t = e.state, a = e.name;
  t.modifiersData[a] = ea({
    reference: t.rects.reference,
    element: t.rects.popper,
    strategy: "absolute",
    placement: t.placement
  });
}
var ln = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: an,
  data: {}
};
function nn(e) {
  return e === "x" ? "y" : "x";
}
function on(e) {
  var t = e.state, a = e.options, l = e.name, n = a.mainAxis, o = n === void 0 ? true : n, r = a.altAxis, s = r === void 0 ? false : r, u = a.boundary, c = a.rootBoundary, i = a.altBoundary, m = a.padding, $ = a.tether, v = $ === void 0 ? true : $, y = a.tetherOffset, S = y === void 0 ? 0 : y, h = He(t, {
    boundary: u,
    rootBoundary: c,
    padding: m,
    altBoundary: i
  }), k = me(t.placement), L = Pe(t.placement), M = !L, w = dt(k), T = nn(w), I = t.modifiersData.popperOffsets, R = t.rects.reference, W = t.rects.popper, G = typeof S == "function" ? S(Object.assign({}, t.rects, {
    placement: t.placement
  })) : S, F = typeof G == "number" ? {
    mainAxis: G,
    altAxis: G
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, G), E = t.modifiersData.offset ? t.modifiersData.offset[t.placement] : null, P = {
    x: 0,
    y: 0
  };
  if (I) {
    if (o) {
      var x, _ = w === "y" ? oe : re, K = w === "y" ? ve : pe, B = w === "y" ? "height" : "width", j = I[w], X = j + h[_], Y = j - h[K], se = v ? -W[B] / 2 : 0, ie = L === Ae ? R[B] : W[B], ue = L === Ae ? -W[B] : -R[B], Te = t.elements.arrow, be = v && Te ? ct(Te) : {
        width: 0,
        height: 0
      }, we = t.modifiersData["arrow#persistent"] ? t.modifiersData["arrow#persistent"].padding : Kt(), U = we[_], J = we[K], Me = Re(0, R[B], be[B]), lt = M ? R[B] / 2 - se - Me - U - F.mainAxis : ie - Me - U - F.mainAxis, aa = M ? -R[B] / 2 + se + Me + J + F.mainAxis : ue + Me + J + F.mainAxis, nt = t.elements.arrow && Ue(t.elements.arrow), la = nt ? w === "y" ? nt.clientTop || 0 : nt.clientLeft || 0 : 0, gt = (x = E == null ? void 0 : E[w]) != null ? x : 0, na = j + lt - gt - la, oa = j + aa - gt, ht = Re(v ? Je(X, na) : X, j, v ? Ee(Y, oa) : Y);
      I[w] = ht, P[w] = ht - j;
    }
    if (s) {
      var yt, ra = w === "x" ? oe : re, sa = w === "x" ? ve : pe, Ve = I[T], Xe = T === "y" ? "height" : "width", bt = Ve + h[ra], wt = Ve - h[sa], ot = [oe, re].indexOf(k) !== -1, kt = (yt = E == null ? void 0 : E[T]) != null ? yt : 0, Bt = ot ? bt : Ve - R[Xe] - W[Xe] - kt + F.altAxis, $t = ot ? Ve + R[Xe] + W[Xe] - kt - F.altAxis : wt, St = v && ot ? Dl(Bt, Ve, $t) : Re(v ? Bt : bt, Ve, v ? $t : wt);
      I[T] = St, P[T] = St - Ve;
    }
    t.modifiersData[l] = P;
  }
}
var rn = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: on,
  requiresIfExists: ["offset"]
};
function sn(e) {
  return {
    scrollLeft: e.scrollLeft,
    scrollTop: e.scrollTop
  };
}
function un(e) {
  return e === ye(e) || !ce(e) ? ft(e) : sn(e);
}
function cn(e) {
  var t = e.getBoundingClientRect(), a = _e(t.width) / e.offsetWidth || 1, l = _e(t.height) / e.offsetHeight || 1;
  return a !== 1 || l !== 1;
}
function dn(e, t, a) {
  a === void 0 && (a = false);
  var l = ce(t), n = ce(t) && cn(t), o = Ce(t), r = Ie(e, n), s = {
    scrollLeft: 0,
    scrollTop: 0
  }, u = {
    x: 0,
    y: 0
  };
  return (l || !l && !a) && ((Be(t) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
  pt(o)) && (s = un(t)), ce(t) ? (u = Ie(t, true), u.x += t.clientLeft, u.y += t.clientTop) : o && (u.x = vt(o))), {
    x: r.left + s.scrollLeft - u.x,
    y: r.top + s.scrollTop - u.y,
    width: r.width,
    height: r.height
  };
}
function fn(e) {
  var t = /* @__PURE__ */ new Map(), a = /* @__PURE__ */ new Set(), l = [];
  e.forEach(function(o) {
    t.set(o.name, o);
  });
  function n(o) {
    a.add(o.name);
    var r = [].concat(o.requires || [], o.requiresIfExists || []);
    r.forEach(function(s) {
      if (!a.has(s)) {
        var u = t.get(s);
        u && n(u);
      }
    }), l.push(o);
  }
  return e.forEach(function(o) {
    a.has(o.name) || n(o);
  }), l;
}
function vn(e) {
  var t = fn(e);
  return rt.reduce(function(a, l) {
    return a.concat(t.filter(function(n) {
      return n.phase === l;
    }));
  }, []);
}
function pn(e) {
  var t;
  return function() {
    return t || (t = new Promise(function(a) {
      Promise.resolve().then(function() {
        t = void 0, a(e());
      });
    })), t;
  };
}
function Se(e) {
  for (var t = arguments.length, a = new Array(t > 1 ? t - 1 : 0), l = 1; l < t; l++)
    a[l - 1] = arguments[l];
  return [].concat(a).reduce(function(n, o) {
    return n.replace(/%s/, o);
  }, e);
}
var De = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var mn = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var _t = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
function gn(e) {
  e.forEach(function(t) {
    [].concat(Object.keys(t), _t).filter(function(a, l, n) {
      return n.indexOf(a) === l;
    }).forEach(function(a) {
      switch (a) {
        case "name":
          typeof t.name != "string" && console.error(Se(De, String(t.name), '"name"', '"string"', '"' + String(t.name) + '"'));
          break;
        case "enabled":
          typeof t.enabled != "boolean" && console.error(Se(De, t.name, '"enabled"', '"boolean"', '"' + String(t.enabled) + '"'));
          break;
        case "phase":
          rt.indexOf(t.phase) < 0 && console.error(Se(De, t.name, '"phase"', "either " + rt.join(", "), '"' + String(t.phase) + '"'));
          break;
        case "fn":
          typeof t.fn != "function" && console.error(Se(De, t.name, '"fn"', '"function"', '"' + String(t.fn) + '"'));
          break;
        case "effect":
          t.effect != null && typeof t.effect != "function" && console.error(Se(De, t.name, '"effect"', '"function"', '"' + String(t.fn) + '"'));
          break;
        case "requires":
          t.requires != null && !Array.isArray(t.requires) && console.error(Se(De, t.name, '"requires"', '"array"', '"' + String(t.requires) + '"'));
          break;
        case "requiresIfExists":
          Array.isArray(t.requiresIfExists) || console.error(Se(De, t.name, '"requiresIfExists"', '"array"', '"' + String(t.requiresIfExists) + '"'));
          break;
        case "options":
        case "data":
          break;
        default:
          console.error('PopperJS: an invalid property has been provided to the "' + t.name + '" modifier, valid properties are ' + _t.map(function(l) {
            return '"' + l + '"';
          }).join(", ") + '; but "' + a + '" was provided.');
      }
      t.requires && t.requires.forEach(function(l) {
        e.find(function(n) {
          return n.name === l;
        }) == null && console.error(Se(mn, String(t.name), l, l));
      });
    });
  });
}
function hn(e, t) {
  var a = /* @__PURE__ */ new Set();
  return e.filter(function(l) {
    var n = t(l);
    if (!a.has(n))
      return a.add(n), true;
  });
}
function yn(e) {
  var t = e.reduce(function(a, l) {
    var n = a[l.name];
    return a[l.name] = n ? Object.assign({}, n, l, {
      options: Object.assign({}, n.options, l.options),
      data: Object.assign({}, n.data, l.data)
    }) : l, a;
  }, {});
  return Object.keys(t).map(function(a) {
    return t[a];
  });
}
var It = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
var bn = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
var Pt = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function Ft() {
  for (var e = arguments.length, t = new Array(e), a = 0; a < e; a++)
    t[a] = arguments[a];
  return !t.some(function(l) {
    return !(l && typeof l.getBoundingClientRect == "function");
  });
}
function wn(e) {
  e === void 0 && (e = {});
  var t = e, a = t.defaultModifiers, l = a === void 0 ? [] : a, n = t.defaultOptions, o = n === void 0 ? Pt : n;
  return function(s, u, c) {
    c === void 0 && (c = o);
    var i = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, Pt, o),
      modifiersData: {},
      elements: {
        reference: s,
        popper: u
      },
      attributes: {},
      styles: {}
    }, m = [], $ = false, v = {
      state: i,
      setOptions: function(k) {
        var L = typeof k == "function" ? k(i.options) : k;
        S(), i.options = Object.assign({}, o, i.options, L), i.scrollParents = {
          reference: Le(s) ? qe(s) : s.contextElement ? qe(s.contextElement) : [],
          popper: qe(u)
        };
        var M = vn(yn([].concat(l, i.options.modifiers)));
        if (i.orderedModifiers = M.filter(function(E) {
          return E.enabled;
        }), true) {
          var w = hn([].concat(M, i.options.modifiers), function(E) {
            var P = E.name;
            return P;
          });
          if (gn(w), me(i.options.placement) === tt) {
            var T = i.orderedModifiers.find(function(E) {
              var P = E.name;
              return P === "flip";
            });
            T || console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
          }
          var I = he(u), R = I.marginTop, W = I.marginRight, G = I.marginBottom, F = I.marginLeft;
          [R, W, G, F].some(function(E) {
            return parseFloat(E);
          }) && console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
        }
        return y(), v.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function() {
        if (!$) {
          var k = i.elements, L = k.reference, M = k.popper;
          if (!Ft(L, M)) {
            console.error(It);
            return;
          }
          i.rects = {
            reference: dn(L, Ue(M), i.options.strategy === "fixed"),
            popper: ct(M)
          }, i.reset = false, i.placement = i.options.placement, i.orderedModifiers.forEach(function(E) {
            return i.modifiersData[E.name] = Object.assign({}, E.data);
          });
          for (var w = 0, T = 0; T < i.orderedModifiers.length; T++) {
            if (w += 1, w > 100) {
              console.error(bn);
              break;
            }
            if (i.reset === true) {
              i.reset = false, T = -1;
              continue;
            }
            var I = i.orderedModifiers[T], R = I.fn, W = I.options, G = W === void 0 ? {} : W, F = I.name;
            typeof R == "function" && (i = R({
              state: i,
              options: G,
              name: F,
              instance: v
            }) || i);
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: pn(function() {
        return new Promise(function(h) {
          v.forceUpdate(), h(i);
        });
      }),
      destroy: function() {
        S(), $ = true;
      }
    };
    if (!Ft(s, u))
      return console.error(It), v;
    v.setOptions(c).then(function(h) {
      !$ && c.onFirstUpdate && c.onFirstUpdate(h);
    });
    function y() {
      i.orderedModifiers.forEach(function(h) {
        var k = h.name, L = h.options, M = L === void 0 ? {} : L, w = h.effect;
        if (typeof w == "function") {
          var T = w({
            state: i,
            name: k,
            instance: v,
            options: M
          }), I = function() {
          };
          m.push(T || I);
        }
      });
    }
    function S() {
      m.forEach(function(h) {
        return h();
      }), m = [];
    }
    return v;
  };
}
var kn = [Fl, ln, Il, Cl, tn, Kl, rn, Tl, Ql];
var Rt = wn({
  defaultModifiers: kn
});
function mt() {
  const e = ref(false), t = ref(), a = ref(), l = ref(void 0), n = reactive({});
  function o(v, y, S) {
    t.value = v, a.value = y, n.value = {
      placement: "bottom",
      modifiers: [
        {
          name: "offset",
          options: {
            offset: [0, 0]
          }
        }
      ],
      ...S
    };
  }
  function r() {
    e.value = !e.value, e.value && nextTick(() => c());
  }
  function s() {
    e.value || (e.value = true, nextTick(() => l.value = c()));
  }
  function u() {
    e.value && (e.value = !e.value);
  }
  function c() {
    !t.value || !a.value || (l.value === void 0 || !l.value ? l.value = Rt(
      t.value,
      a.value,
      n.value
    ) : l.value.update());
  }
  function i(v, y) {
    n.value && (n.value[v] = y), t.value && a.value && (l.value = Rt(
      t.value,
      a.value,
      n.value
    ));
  }
  function m() {
    l.value && (l.value.destroy(), l.value = void 0);
  }
  function $(v, y) {
    return typeof v == "string" ? v.split(",").map((S) => Number.parseInt(S, 10)) : typeof v == "function" ? (S) => v(S, y) : v;
  }
  return {
    setPopper: o,
    togglePopper: r,
    isPopperActive: e,
    openPopper: s,
    closePopper: u,
    updatePopper: i,
    destroyPopper: m,
    getPopperOffset: $
  };
}
var ta = (e, t) => {
  const a = {
    none: {
      width: 0,
      attr: null
    },
    sm: {
      width: 576,
      attr: null
    },
    md: {
      width: 768,
      attr: null
    },
    lg: {
      width: 992,
      attr: null
    },
    xl: {
      width: 1200,
      attr: null
    },
    xxl: {
      width: 1400,
      attr: null
    },
    mega: {
      width: 1e4,
      attr: null
    }
  };
  t.forEach((o) => {
    const r = Object.keys(a).filter(
      (s) => o.includes(s) ? s : false
    )[0];
    r ? a[r].attr = o : a.none.attr = o;
  });
  const l = {};
  return Object.keys(a).reduce((o, r, s) => a[o].attr && a[r].attr || a[o].attr && !r ? (l[a[o].attr] = {
    min: a[o].width,
    max: a[r].width
  }, r) : a[o].attr && !a[r].attr ? (s === Object.keys(a).length - 1 && (l[a[o].attr] = {
    min: a[o].width,
    max: a[r].width
  }), o) : ""), Object.keys(l).filter((o) => {
    if (e > l[o].min && e < l[o].max)
      return o;
  })[0];
};
var Qe = () => typeof window < "u" && window.matchMedia ? window.matchMedia("(prefers-reduced-motion: reduce)").matches : false;
var Bn = {
  name: "MDBDropdown"
};
var zr = defineComponent({
  ...Bn,
  props: {
    tag: {
      type: String,
      default: "div"
    },
    boundary: {
      type: String,
      default: "clippingParent"
    },
    btnGroup: {
      type: Boolean,
      default: false
    },
    dropup: {
      type: Boolean,
      default: false
    },
    dropend: {
      type: Boolean,
      default: false
    },
    dropstart: {
      type: Boolean,
      default: false
    },
    align: {
      type: [String, Array],
      default: "start"
    },
    offset: {
      type: [Array, String, Function],
      default: () => [0, 0]
    },
    popperConfig: [null, Object, Function],
    target: String,
    modelValue: Boolean
  },
  emits: ["update:modelValue"],
  setup(e, { emit: t }) {
    const a = e, l = computed(() => [
      a.btnGroup ? "btn-group" : "dropdown",
      a.dropup && "dropup",
      a.dropend && "dropend",
      a.dropstart && "dropstart"
    ]), {
      setPopper: n,
      isPopperActive: o,
      closePopper: r,
      openPopper: s,
      updatePopper: u,
      getPopperOffset: c
    } = mt(), i = ref(null), m = ref(null), $ = ref(null), v = ref(window.innerWidth), y = ref("");
    provide("menuAlignClasses", y), provide("closePopper", r);
    const S = ref(a.modelValue), h = ref(true), k = ref(0), L = ref(0);
    watch(
      () => a.modelValue,
      (x) => {
        clearInterval(L.value), h.value && x !== S.value && (S.value = a.modelValue, h.value = false), L.value = setTimeout(
          () => {
            S.value = a.modelValue;
          },
          Qe() ? 0 : 300
        );
      }
    ), watch(
      () => h.value,
      (x) => {
        x || (k.value = setTimeout(
          () => {
            h.value = true;
          },
          Qe() ? 0 : 200
        ));
      }
    ), provide("isActive", S);
    const M = ref(false), w = ref(null);
    provide("setMenuMountedState", (x, _) => {
      M.value = x, w.value = _;
    });
    const I = (x) => {
      x ? (F(), s()) : r();
    };
    watch(
      () => M.value,
      (x) => I(x),
      { immediate: true }
    ), provide("isPopperActive", o), provide("externalTarget", a.target), provide("handleEscAndOutsideClick", () => {
      t("update:modelValue", false);
    });
    const W = a.dropup ? "top" : a.dropend ? "right" : a.dropstart ? "left" : "bottom", G = () => {
      typeof a.align == "string" ? y.value = `dropdown-menu-${a.align}` : y.value = a.align.map(
        (j) => `dropdown-menu-${j}`.trim()
      );
      let x = a.align;
      (typeof a.align != "string" || a.align !== "start" && a.align !== "end") && (x = E(), ne(window, "resize", P));
      const _ = `${W}-${x}`;
      let K = document.querySelector(a.boundary);
      K || (K = a.boundary);
      const B = {
        placement: _,
        modifiers: [
          {
            name: "preventOverflow",
            options: {
              boundary: K
            }
          },
          {
            name: "offset",
            options: {
              offset: c(a.offset, i.value)
            }
          }
        ]
      };
      return {
        ...B,
        ...typeof a.popperConfig == "function" ? a.popperConfig(B) : a.popperConfig
      };
    }, F = () => {
      var _;
      m.value = a.target ? document.querySelector(a.target) : (_ = i.value) == null ? void 0 : _.querySelector("[data-trigger]"), $.value = w.value;
      const x = G();
      n(m.value, $.value, x);
    }, E = () => {
      v.value = window.innerWidth;
      let x = a.align;
      typeof a.align == "string" && (x = ["start", a.align]);
      const _ = ta(
        v.value,
        x
      );
      return _ ? _.includes("start") ? "start" : "end" : "";
    }, P = () => {
      const x = E();
      u("placement", `${W}-${x}`);
    };
    return onUnmounted(() => {
      clearInterval(k.value), clearInterval(L.value), ae(window, "resize", P);
    }), (x, _) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(l.value),
      ref_key: "root",
      ref: i
    }, {
      default: withCtx(() => [
        renderSlot(x.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var Ze = {
  stopProp(e) {
    e.stopPropagation();
  },
  mounted(e, t) {
    const a = (n) => {
      const o = n.target;
      !e.contains(o) && e !== o && t.value(n);
    };
    e.clickOutside = a;
    const l = t.modifiers.mousedown ? "mousedown" : "click";
    document.addEventListener(l, (n) => {
      var o;
      return (o = e.clickOutside) == null ? void 0 : o.call(e, n);
    }), document.addEventListener("touchstart", (n) => {
      var o;
      return (o = e.clickOutside) == null ? void 0 : o.call(e, n);
    });
  },
  unmounted(e, t) {
    if (!e.clickOutside)
      return;
    const a = t.modifiers.mousedown ? "mousedown" : "click";
    document.removeEventListener(a, (l) => {
      var n;
      return (n = e.clickOutside) == null ? void 0 : n.call(e, l);
    }), document.removeEventListener("touchstart", (l) => {
      var n;
      return (n = e.clickOutside) == null ? void 0 : n.call(e, l);
    }), delete e.clickOutside;
  }
};
var $n = {
  key: 1,
  class: "visually-hidden"
};
var Sn = {
  name: "MDBDropdownToggle"
};
var Wr = defineComponent({
  ...Sn,
  props: {
    ...Ca.props,
    tag: {
      type: String,
      default: "button"
    },
    href: [String, null],
    split: {
      type: Boolean,
      default: false
    }
  },
  setup(e) {
    const t = e, a = computed(() => [
      l.value,
      "dropdown-toggle",
      t.split && "dropdown-toggle-split",
      t.size && `btn-${t.size}`,
      t.outline && `btn-outline-${t.outline}`
    ]), l = computed(() => t.tag !== "button" ? void 0 : `btn ${t.color && !t.outline ? `btn-${t.color}` : t.outline ? "" : "btn-primary"}`), n = ref(false), o = () => {
      n.value = !n.value;
    }, r = inject("isPopperActive");
    watchEffect(() => {
      n.value = r ? r.value : false;
    });
    const s = inject("handleEscAndOutsideClick"), u = (c) => {
      const i = c.target;
      r && !i.closest(".dropdown-menu") && (s == null || s());
    };
    return (c, i) => withDirectives((openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      type: "button",
      class: normalizeClass(a.value),
      "aria-expanded": n.value,
      "aria-haspopup": "true",
      onClick: o,
      "data-trigger": ""
    }, {
      default: withCtx(() => [
        e.split ? (openBlock(), createElementBlock("span", $n, "Toggle Dropdown")) : renderSlot(c.$slots, "default", { key: 0 })
      ]),
      _: 3
    }, 8, ["class", "aria-expanded"])), [
      [unref(Ze), u],
      [unref(it)]
    ]);
  }
});
var xn = {
  key: 0,
  class: "mt-2 mx-2"
};
var Cn = {
  key: 0,
  class: "mt-2 mx-2"
};
var Mn = {
  name: "MDBDropdownMenu",
  inheritAttrs: false
};
var Hr = defineComponent({
  ...Mn,
  props: {
    tag: {
      type: String,
      default: "ul"
    },
    fadeIn: {
      type: String,
      default: "fade-in"
    },
    fadeOut: {
      type: String,
      default: "fade-out"
    },
    animation: {
      type: Boolean,
      default: true
    },
    dark: {
      type: Boolean,
      default: false
    },
    static: {
      type: Boolean,
      default: false
    },
    filter: {
      type: Boolean,
      default: false
    }
  },
  setup(e) {
    const t = e, a = Qe() ? 0 : 550, l = computed(() => [
      "dropdown-menu",
      n === "dropdown-menu-start" ? "dropdown-menu-start" : n.value,
      r.value,
      s.value && "show",
      t.dark && "dropdown-menu-dark"
    ]), n = inject(
      "menuAlignClasses",
      "dropdown-menu-start"
    ), o = ref("root"), r = ref(null), s = ref(false), u = computed(() => t.static ? { display: "block", position: "static" } : false), c = () => {
      t.animation && setTimeout(() => {
        r.value = false;
      }, a);
    }, i = inject("setMenuMountedState", () => false), m = inject("isActive", false);
    m && watch(
      () => m.value,
      (F) => {
        F ? setTimeout(
          () => {
            i(true, o.value);
          },
          Qe() ? 0 : 100
        ) : !F && k && ($(), setTimeout(() => {
          i(false);
        }, a));
      }
    );
    const $ = () => {
      ae(document, "keydown", I), M.value = 0, r.value = t.animation && `animation ${t.fadeOut}`, s.value = false, c();
    }, v = computed(() => t.static || m && m.value || m && !m.value && k && k.value ? true : (m && !m.value && k && !k.value && setTimeout(() => false, a), false)), y = inject("externalTarget", false), S = ref(false), h = ref("");
    onMounted(() => {
      y && document.body.querySelector(y) && (S.value = true, h.value = y);
    });
    const k = inject("isPopperActive", null), L = () => {
      ne(document, "keydown", I), r.value = t.animation && `animation ${t.fadeIn}`, c();
    };
    k && watch(
      () => k.value,
      (F, E) => {
        o.value && (!E && F === true || E === false) && (w.value = o.value.querySelectorAll(
          ".dropdown-item"
        ), s.value = true, L());
      }
    );
    const M = ref(0), w = ref(null), T = inject(
      "handleEscAndOutsideClick",
      () => false
    ), I = (F) => {
      var P, x;
      const E = F.key;
      if ((E === "ArrowUp" || E === "ArrowDown") && F.preventDefault(), !(m && !m.value)) {
        switch (w.value && w.value.forEach((_) => {
          _.classList.remove("active");
        }), E) {
          case "Escape":
            T();
            return;
          case "Enter":
            w.value && ((P = w.value[M.value - 1]) == null || P.click());
            return;
          case "ArrowUp":
            M.value--, M.value <= 0 && w.value && (M.value = w.value.length);
            break;
          case "ArrowDown":
            M.value++, w.value && M.value > w.value.length && (M.value = 1);
            break;
        }
        w.value && ((x = w.value[M.value - 1]) == null || x.classList.add("active"));
      }
    }, R = ref(""), W = ref([]), G = () => {
      W.value = [
        ...o.value.querySelectorAll(".dropdown-item")
      ], W.value.forEach((F) => {
        F.style.display = "flex";
      }), R.value && W.value.forEach((F) => {
        var x;
        const E = (x = F.textContent) == null ? void 0 : x.trim().toLowerCase();
        (E == null ? void 0 : E.includes(R.value.toLowerCase())) || (F.style.display = "none");
      });
    };
    return watch(
      () => R.value,
      () => {
        G();
      }
    ), (F, E) => S.value ? (openBlock(), createBlock(Teleport, {
      key: 1,
      to: h.value
    }, [
      createVNode(Transition, null, {
        default: withCtx(() => [
          v.value ? (openBlock(), createBlock(resolveDynamicComponent(e.tag), mergeProps({
            key: 0,
            class: l.value,
            style: u.value
          }, F.$attrs, {
            "data-popper": unref(y),
            ref_key: "root",
            ref: o
          }), {
            default: withCtx(() => [
              e.filter ? (openBlock(), createElementBlock("div", Cn, [
                createVNode(unref(qt), {
                  modelValue: R.value,
                  "onUpdate:modelValue": E[1] || (E[1] = (P) => R.value = P),
                  role: "searchbox",
                  type: "text",
                  label: "Search"
                }, null, 8, ["modelValue"])
              ])) : createCommentVNode("", true),
              renderSlot(F.$slots, "default")
            ]),
            _: 3
          }, 16, ["class", "style", "data-popper"])) : createCommentVNode("", true)
        ]),
        _: 3
      })
    ], 8, ["to"])) : (openBlock(), createBlock(Transition, { key: 0 }, {
      default: withCtx(() => [
        v.value ? (openBlock(), createBlock(resolveDynamicComponent(e.tag), mergeProps({
          key: 0,
          class: l.value,
          style: u.value
        }, F.$attrs, {
          "data-popper": "",
          ref_key: "root",
          ref: o
        }), {
          default: withCtx(() => [
            e.filter ? (openBlock(), createElementBlock("div", xn, [
              createVNode(unref(qt), {
                modelValue: R.value,
                "onUpdate:modelValue": E[0] || (E[0] = (P) => R.value = P),
                role: "searchbox",
                type: "text",
                label: "Search"
              }, null, 8, ["modelValue"])
            ])) : createCommentVNode("", true),
            renderSlot(F.$slots, "default")
          ]),
          _: 3
        }, 16, ["class", "style"])) : createCommentVNode("", true)
      ]),
      _: 3
    }));
  }
});
var Vn = ["tabindex"];
var Dn = {
  key: 1,
  class: "dropdown-divider"
};
var On = {
  name: "MDBDropdownItem",
  inheritAttrs: false
};
var Gr = defineComponent({
  ...On,
  props: {
    tag: {
      type: String,
      default: "a"
    },
    to: [String, Object],
    href: String,
    disabled: {
      type: Boolean,
      default: false
    },
    active: {
      type: Boolean,
      default: false
    },
    exact: {
      type: Boolean,
      default: false
    },
    newTab: {
      type: Boolean,
      default: false
    },
    submenu: {
      type: Boolean,
      default: false
    },
    submenuIcon: String,
    divider: {
      type: Boolean,
      default: false
    },
    text: {
      type: Boolean,
      default: false
    },
    header: {
      type: Boolean,
      default: false
    }
  },
  setup(e) {
    const t = e, a = computed(() => [
      n.value,
      t.disabled ? "disabled" : "",
      t.active ? "active" : "",
      t.submenu && "dropdown-submenu"
    ]), l = computed(() => !!(t.to !== void 0 || t.href !== void 0 || t.tag !== "a" || t.text)), n = computed(() => t.text ? "dropdown-item-text" : t.header ? "dropdown-header" : "dropdown-item"), o = computed(() => t.to ? "router-link" : t.text ? "span" : t.tag), r = computed(() => t.newTab ? "_blank" : null), s = inject(
      "handleEscAndOutsideClick",
      () => false
    );
    return (u, c) => (openBlock(), createElementBlock("li", {
      tabindex: e.divider ? void 0 : 0
    }, [
      l.value ? (openBlock(), createBlock(resolveDynamicComponent(o.value), mergeProps({ key: 0 }, u.$attrs, {
        to: e.to,
        exact: e.to ? e.exact : null,
        href: e.to ? null : e.href,
        class: a.value,
        target: r.value,
        type: e.tag === "button" ? "button" : null,
        "aria-current": e.active ? true : null,
        "aria-disabled": e.disabled ? true : null,
        disabled: e.disabled ? true : null,
        onClick: unref(s)
      }), {
        default: withCtx(() => [
          renderSlot(u.$slots, "default")
        ]),
        _: 3
      }, 16, ["to", "exact", "href", "class", "target", "type", "aria-current", "aria-disabled", "disabled", "onClick"])) : e.divider ? (openBlock(), createElementBlock("hr", Dn)) : renderSlot(u.$slots, "default", { key: 2 })
    ], 8, Vn));
  }
});
var En = {
  key: 0,
  "data-popper-arrow": "",
  class: "tooltip_arrow"
};
var Nn = {
  name: "MDBTooltip"
};
var Ur = defineComponent({
  ...Nn,
  props: {
    tag: {
      type: String,
      default: "span"
    },
    modelValue: Boolean,
    reference: String,
    popover: String,
    options: {
      type: [Object, Function],
      default() {
        return {};
      }
    },
    boundary: {
      type: String,
      default: "clippingParent"
    },
    fallbackPlacements: {
      type: Array,
      default: () => ["top", "right", "bottom", "left"]
    },
    offset: {
      type: String,
      default: "0, 5"
    },
    direction: {
      type: String,
      default: "top",
      validator: (e) => ["top", "right", "bottom", "left"].indexOf(e.toLowerCase()) > -1
    },
    maxWidth: {
      type: Number,
      default: 276
    },
    arrow: {
      type: Boolean,
      default: false
    },
    disabled: Boolean
  },
  emits: ["update:modelValue"],
  setup(e, { emit: t }) {
    const a = e, { setPopper: l, isPopperActive: n, openPopper: o, closePopper: r, getPopperOffset: s } = mt(), u = ref(null), c = ref(null), i = computed(() => `max-width: ${a.maxWidth}px!important`), m = () => {
      const M = a.direction;
      let w = document.querySelector(a.boundary);
      w || (w = a.boundary);
      const T = {
        placement: M,
        modifiers: [
          {
            name: "flip",
            options: {
              fallbackPlacements: a.fallbackPlacements
            }
          },
          {
            name: "preventOverflow",
            options: {
              boundary: w
            }
          },
          {
            name: "offset",
            options: {
              offset: s(a.offset, u.value)
            }
          },
          {
            name: "arrow",
            options: {
              element: ".tooltip_arrow",
              padding: 5
            }
          }
        ]
      };
      return {
        ...T,
        ...typeof a.options == "function" ? a.options(T) : a.options
      };
    }, $ = () => {
      u.value = a.reference ? document.querySelector(a.reference) : u.value, c.value = a.popover ? document.querySelector(a.popover) : c.value;
      const M = m();
      u.value && c.value && l(u.value, c.value, M);
    }, v = ref(false);
    watchEffect(() => {
      if (a.modelValue) {
        if (v.value)
          return;
        nextTick(() => {
          $(), setTimeout(o, 0), setTimeout(() => {
            var M;
            (M = c.value) == null || M.classList.add("show");
          }, 0);
        });
      } else {
        if (!n.value)
          return;
        setTimeout(() => {
          c.value && c.value.classList.remove("show");
        }, 10), v.value = true, setTimeout(() => {
          r(), v.value = false;
        }, 150);
      }
    });
    const y = computed(() => a.modelValue || !a.modelValue && n.value ? true : (!a.modelValue && !n.value, false)), S = () => {
      !a.disabled && t("update:modelValue", true);
    }, h = () => {
      !a.disabled && t("update:modelValue", false);
    }, k = useSlots(), L = computed(() => {
      var w;
      const M = (w = k.tip) == null ? void 0 : w.call(k);
      return !M || M.length === 0 || M.every((T) => !T.children || T.children.length === 0);
    });
    return (M, w) => (openBlock(), createElementBlock(Fragment, null, [
      (openBlock(), createBlock(resolveDynamicComponent(e.tag), mergeProps({
        ref_key: "triggerEl",
        ref: u,
        style: { display: "inline-block" }
      }, M.$attrs, {
        onMouseenter: S,
        onMouseleave: h,
        onFocus: S,
        onBlur: h
      }), {
        default: withCtx(() => [
          renderSlot(M.$slots, "reference")
        ]),
        _: 3
      }, 16)),
      createVNode(Transition, { name: "fade" }, {
        default: withCtx(() => [
          y.value && !L.value ? (openBlock(), createElementBlock("div", {
            key: 0,
            ref_key: "popperEl",
            ref: c,
            class: normalizeClass({
              tooltip: true,
              fade: true,
              "tooltip-inner": true
            }),
            style: normalizeStyle([i.value])
          }, [
            renderSlot(M.$slots, "tip"),
            e.arrow ? (openBlock(), createElementBlock("div", En)) : createCommentVNode("", true)
          ], 4)) : createCommentVNode("", true)
        ]),
        _: 3
      })
    ], 64));
  }
});
var Tn = {
  key: 0,
  class: "popover-header"
};
var An = {
  key: 1,
  class: "popover-body"
};
var Ln = {
  key: 2,
  "data-popper-arrow": "",
  class: "popover_arrow"
};
var _n = {
  name: "MDBPopover"
};
var Xr = defineComponent({
  ..._n,
  props: {
    tag: {
      type: String,
      default: "span"
    },
    modelValue: Boolean,
    reference: String,
    popover: String,
    options: {
      type: [Object, Function],
      default() {
        return {};
      }
    },
    boundary: {
      type: String,
      default: "clippingParent"
    },
    fallbackPlacements: {
      type: Array,
      default: () => ["top", "right", "bottom", "left"]
    },
    offset: {
      type: String,
      default: "0, 5"
    },
    direction: {
      type: String,
      default: "bottom",
      validator: (e) => ["top", "right", "bottom", "left"].indexOf(e.toLowerCase()) > -1
    },
    maxWidth: {
      type: Number,
      default: 276
    },
    arrow: {
      type: Boolean,
      default: false
    },
    dismissible: {
      type: Boolean,
      default: false
    },
    hover: {
      type: Boolean,
      default: false
    }
  },
  emits: ["update:modelValue"],
  setup(e, { emit: t }) {
    const a = e, {
      setPopper: l,
      isPopperActive: n,
      openPopper: o,
      closePopper: r,
      destroyPopper: s,
      getPopperOffset: u
    } = mt(), c = ref(null), i = ref(null), m = computed(() => `max-width: ${a.maxWidth}px!important`), $ = () => a.arrow ? [0, 10] : a.offset, v = () => {
      const w = a.direction;
      let T = document.querySelector(a.boundary);
      T || (T = a.boundary);
      const I = $(), R = {
        placement: w,
        modifiers: [
          {
            name: "flip",
            options: {
              fallbackPlacements: a.fallbackPlacements
            }
          },
          {
            name: "preventOverflow",
            options: {
              boundary: T
            }
          },
          {
            name: "offset",
            options: {
              offset: u(I, c.value)
            }
          },
          {
            name: "arrow",
            options: {
              element: ".popover_arrow",
              padding: 5
            }
          }
        ]
      };
      return {
        ...R,
        ...typeof a.options == "function" ? a.options(R) : a.options
      };
    }, y = () => {
      c.value = a.reference ? document.querySelector(a.reference) : c.value, i.value = a.popover ? document.querySelector(a.popover) : i.value;
      const w = v();
      c.value && i.value && l(c.value, i.value, w);
    };
    watchEffect(() => {
      if (a.modelValue)
        nextTick(() => {
          y(), setTimeout(o, 0), setTimeout(() => {
            var w;
            (w = i.value) == null || w.classList.add("show"), a.hover && i.value && (ne(i.value, "mouseover", h), ne(i.value, "mouseout", k));
          }, 0);
        });
      else {
        if (!n.value)
          return;
        setTimeout(() => {
          i.value && (ae(i.value, "mouseover", h), ae(i.value, "mouseout", k), i.value.classList.remove("show"));
        }, 0), setTimeout(r, 0), s();
      }
    });
    const S = computed(() => a.modelValue || !a.modelValue && n.value ? true : (!a.modelValue && !n.value, false)), h = () => {
      t("update:modelValue", true);
    }, k = () => {
      t("update:modelValue", false);
    }, L = () => {
      !a.dismissible || !a.modelValue || t("update:modelValue", false);
    }, M = () => {
      c.value && (ae(c.value, "mouseover", h), ae(c.value, "mouseout", k)), s();
    };
    return onMounted(() => {
      a.hover && c.value && (ne(c.value, "mouseover", h), ne(c.value, "mouseout", k));
    }), onUnmounted(() => {
      M();
    }), (w, T) => (openBlock(), createElementBlock(Fragment, null, [
      withDirectives((openBlock(), createBlock(resolveDynamicComponent(e.tag), mergeProps({
        ref_key: "triggerEl",
        ref: c,
        style: { display: "inline-block" },
        tabindex: e.dismissible ? 0 : null
      }, w.$attrs), {
        default: withCtx(() => [
          renderSlot(w.$slots, "reference")
        ]),
        _: 3
      }, 16, ["tabindex"])), [
        [unref(Ze), L]
      ]),
      createVNode(Transition, null, {
        default: withCtx(() => [
          S.value && (w.$slots.header || w.$slots.body) ? (openBlock(), createElementBlock("div", {
            key: 0,
            ref_key: "popperEl",
            ref: i,
            class: normalizeClass({ popover: true, fade: true }),
            style: normalizeStyle([m.value])
          }, [
            w.$slots.header ? (openBlock(), createElementBlock("div", Tn, [
              renderSlot(w.$slots, "header")
            ])) : createCommentVNode("", true),
            w.$slots.body ? (openBlock(), createElementBlock("div", An, [
              renderSlot(w.$slots, "body")
            ])) : createCommentVNode("", true),
            renderSlot(w.$slots, "default"),
            e.arrow ? (openBlock(), createElementBlock("div", Ln)) : createCommentVNode("", true)
          ], 4)) : createCommentVNode("", true)
        ]),
        _: 3
      })
    ], 64));
  }
});
function In() {
  const e = ref(), t = ref(), a = ref();
  function l(c) {
    return e.value = c, n(), ne(window, "keydown", s), true;
  }
  function n() {
    if (!e.value)
      return;
    const c = Array.from(
      e.value.querySelectorAll(
        'button, a, input, select, textarea, [tabindex]:not([tabindex="-1"])'
      )
    ).filter((i) => {
      const m = i instanceof HTMLAnchorElement ? true : !i.disabled;
      return !i.classList.contains("ps__thumb-x") && !i.classList.contains("ps__thumb-y") && m;
    });
    c.length !== 0 && (t.value = c[0], a.value = c[c.length - 1], ne(
      a.value,
      "keydown",
      (i) => o(i)
    ));
  }
  function o(c) {
    c.key === "Tab" && (c.preventDefault(), r());
  }
  function r() {
    t.value && t.value.focus();
  }
  function s(c, i = false) {
    c.key === "Tab" && (c.preventDefault(), r()), !i && ae(window, "keydown", s);
  }
  function u() {
    ae(a.value, "keydown", o);
  }
  return {
    initFocusTrap: l,
    removeFocusTrap: u
  };
}
function Pn(e, t) {
  const a = ref("root"), l = ref("dialog"), n = ref(""), o = ref(null), r = ref(e.modelValue), s = ref(false), u = ref(null);
  watchEffect(() => {
    r.value = e.modelValue, r.value && t("update:modelValue", true);
  });
  const c = computed(() => [
    "modal",
    e.animation && "fade",
    r.value && "show",
    e.staticBackdrop && "modal-static"
  ]), i = computed(() => [
    "modal-dialog",
    e.size && "modal-" + e.size,
    e.centered && "modal-dialog-centered",
    e.scrollable && "modal-dialog-scrollable",
    e.fullscreen && S.value,
    e.dialogClasses
  ]), m = computed(() => e.removeBackdrop ? false : { "background-color": "rgba(0,0,0, 0.5)" }), $ = ref(false), v = computed(() => {
    if (!($.value || e.keepOverflow))
      return "overflow: hidden";
  }), y = computed(() => e.bgSrc ? { "background-image": `url("${e.bgSrc}")` } : {}), S = computed(() => e.fullscreen ? [
    e.fullscreen !== true ? `modal-fullscreen-${e.fullscreen}` : "modal-fullscreen"
  ] : false), h = () => {
    typeof l.value != "string" && L(l.value);
  }, k = () => {
    t("update:modelValue", false);
  };
  provide("closeModal", k);
  const L = (B) => {
    B.style.transform = "scale(1.02)", setTimeout(() => B.style.transform = "scale(1.0)", 300);
  }, M = (B) => {
    B.key === "Escape" && r.value && k();
  }, w = ref(null), T = ref(0), I = () => {
    const B = document.createElement("div");
    B.className = "modal-scrollbar-measure", document.body.appendChild(B);
    const j = B.getBoundingClientRect().width - B.clientWidth;
    return document.body.removeChild(B), j;
  }, R = () => {
    const B = document.body.getBoundingClientRect();
    w.value = Math.round(B.left + B.right) < window.innerWidth, T.value = w.value ? Number(I().toFixed(2)) : 0;
  }, W = () => {
    document.body.style.paddingRight = "", document.body.classList.remove("modal-open");
  }, G = (B) => {
    const j = B;
    $.value = false, n.value = "translate(0, -25%)";
    const X = j.childNodes[0];
    X.style.transform = n.value, j.style.opacity = "0", j.style.display = "block", R(), K(), _.value && (document.body.style.paddingRight = `${T.value}px`, j.style.paddingRight = `${T.value}px`, document.body.classList.add("modal-open")), t("show", a.value);
  }, F = (B) => {
    var Y;
    const j = B, X = j.childNodes[0];
    X.style.transform = "translate(0,0)", j.style.opacity = "1", setTimeout(() => {
      $.value = true, t("shown", a.value);
    }, 400), u.value = a.value, e.keyboard && ne(window, "keyup", M), e.focus && (o.value = In(), (Y = o.value) == null || Y.initFocusTrap(a.value));
  }, E = (B) => {
    const j = B, X = j.childNodes[0];
    X.style.transform = n.value, j.style.opacity = "0", _.value && setTimeout(() => {
      j.style.paddingRight = "", W();
    }, 200), t("hide", u.value), e.keyboard && ae(window, "keyup", M), e.focus && o.value && o.value.removeFocusTrap();
  }, P = () => {
    t("hidden", u.value), $.value = false;
  }, x = () => !!(document.body.classList.contains("modal-open") && document.body.querySelector(".modal.show"));
  onBeforeUnmount(() => {
    x() && (W(), document.body.style.overflowY = ""), ae(window, "keyup", M);
  });
  const _ = ref(true), K = () => {
    _.value = document.body.classList.contains("modal-open") ? !!document.querySelector(".modal.non-invasive") : true;
  };
  return {
    wrapperClass: c,
    dialogClass: i,
    backdropStyle: m,
    backdropOverflowStyle: v,
    computedContentStyle: y,
    root: a,
    dialog: l,
    isActive: r,
    closeModal: k,
    animateStaticBackdrop: h,
    enter: G,
    afterEnter: F,
    beforeLeave: E,
    afterLeave: P,
    scrollbarWidth: T,
    setScrollbar: R,
    shouldOverflow: $,
    thisElement: u,
    handleEscKeyUp: M,
    focusTrap: o,
    dialogTransform: n,
    animateStaticModal: L,
    fullscreenClass: S,
    clickFromBackdrop: s,
    isOnlyNonInvasiveModal: K,
    onlyNonInvasiveModal: _
  };
}
var Fn = {
  name: "MDBModal"
};
var Yr = defineComponent({
  ...Fn,
  props: {
    tag: {
      type: String,
      default: "div"
    },
    modelValue: Boolean,
    size: {
      type: String,
      validator: (e) => ["sm", "lg", "xl"].indexOf(e.toLowerCase()) > -1
    },
    removeBackdrop: {
      type: Boolean,
      default: false
    },
    staticBackdrop: {
      type: Boolean,
      default: false
    },
    centered: {
      type: Boolean,
      default: false
    },
    bgSrc: {
      type: String,
      default: ""
    },
    scrollable: {
      type: Boolean,
      default: false
    },
    duration: {
      type: Number,
      default: 400
    },
    labelledby: String,
    fullscreen: {
      type: [Boolean, String],
      default: false
    },
    animation: {
      type: Boolean,
      default: true
    },
    dialogClasses: {
      type: String
    },
    keyboard: {
      type: Boolean,
      default: true
    },
    focus: {
      type: Boolean,
      default: true
    },
    keepOverflow: {
      type: Boolean,
      default: false
    }
  },
  emits: [
    "show",
    "shown",
    "hide",
    "hidden",
    "update:modelValue"
  ],
  setup(e, { emit: t }) {
    const a = e, {
      wrapperClass: l,
      dialogClass: n,
      backdropStyle: o,
      backdropOverflowStyle: r,
      computedContentStyle: s,
      root: u,
      dialog: c,
      isActive: i,
      closeModal: m,
      animateStaticBackdrop: $,
      enter: v,
      afterEnter: y,
      beforeLeave: S,
      afterLeave: h,
      clickFromBackdrop: k
    } = Pn(a, t);
    return (L, M) => (openBlock(), createBlock(Transition, {
      onEnter: unref(v),
      onAfterEnter: unref(y),
      onBeforeLeave: unref(S),
      onAfterLeave: unref(h)
    }, {
      default: withCtx(() => [
        unref(i) ? (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
          key: 0,
          ref_key: "root",
          ref: u,
          class: normalizeClass(unref(l)),
          style: normalizeStyle([unref(o), unref(r)]),
          "aria-hidden": !unref(i),
          "aria-modal": unref(i) ? true : null,
          "aria-labelledby": e.labelledby,
          role: "dialog",
          onMousedown: M[0] || (M[0] = withModifiers((w) => k.value = true, ["self"])),
          onClick: M[1] || (M[1] = withModifiers(
            () => {
              unref(k) && (e.staticBackdrop ? unref($)() : (unref(m)(), k.value = false));
            },
            ["self"]
          ))
        }, {
          default: withCtx(() => [
            createBaseVNode("div", {
              class: normalizeClass(unref(n)),
              role: "document",
              ref_key: "dialog",
              ref: c
            }, [
              createBaseVNode("div", {
                class: "modal-content",
                style: normalizeStyle(unref(s))
              }, [
                renderSlot(L.$slots, "default")
              ], 4)
            ], 2)
          ]),
          _: 3
        }, 40, ["class", "style", "aria-hidden", "aria-modal", "aria-labelledby"])) : createCommentVNode("", true)
      ]),
      _: 3
    }, 8, ["onEnter", "onAfterEnter", "onBeforeLeave", "onAfterLeave"]));
  }
});
var Rn = {
  name: "MDBModalHeader"
};
var Kr = defineComponent({
  ...Rn,
  props: {
    tag: {
      type: String,
      default: "div"
    },
    close: {
      type: Boolean,
      default: true
    },
    closeWhite: {
      type: Boolean,
      default: false
    },
    color: String
  },
  setup(e) {
    const t = e, a = inject("closeModal"), l = computed(() => ["modal-header", t.color && `bg-${t.color}`]);
    return (n, o) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(l.value)
    }, {
      default: withCtx(() => [
        renderSlot(n.$slots, "default"),
        e.close ? (openBlock(), createBlock(Da, {
          key: 0,
          white: e.closeWhite,
          onClick: withModifiers(unref(a), ["prevent"])
        }, null, 8, ["white", "onClick"])) : createCommentVNode("", true)
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var qn = {
  name: "MDBModalTitle"
};
var Jr = defineComponent({
  ...qn,
  props: {
    tag: {
      type: String,
      default: "h5"
    },
    bold: {
      type: Boolean,
      default: false
    }
  },
  setup(e) {
    const t = e, a = computed(() => ["modal-title", t.bold && "font-weight-bold"]);
    return (l, n) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(a.value)
    }, {
      default: withCtx(() => [
        renderSlot(l.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var jn = {
  name: "MDBModalBody"
};
var Qr = defineComponent({
  ...jn,
  props: {
    tag: {
      type: String,
      default: "div"
    }
  },
  setup(e) {
    const t = computed(() => ["modal-body"]);
    return (a, l) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(t.value)
    }, {
      default: withCtx(() => [
        renderSlot(a.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var zn = {
  name: "MDBModalFooter"
};
var Zr = defineComponent({
  ...zn,
  props: {
    tag: {
      type: String,
      default: "div"
    }
  },
  setup(e) {
    const t = computed(() => ["modal-footer"]);
    return (a, l) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(t.value)
    }, {
      default: withCtx(() => [
        renderSlot(a.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var Wn = {
  name: "MDBAccordion"
};
var es = defineComponent({
  ...Wn,
  props: {
    tag: {
      type: String,
      default: "div"
    },
    modelValue: String,
    stayOpen: Boolean,
    flush: Boolean,
    classes: String,
    borderless: Boolean
  },
  emits: ["update:modelValue"],
  setup(e, { emit: t }) {
    const a = e, l = ref(null), n = computed(() => [
      "accordion",
      a.flush && "accordion-flush",
      a.classes,
      a.borderless && "accordion-borderless"
    ]), o = ref(a.modelValue), r = (s) => {
      o.value = s, t("update:modelValue", s);
    };
    return watchEffect(() => o.value = a.modelValue), provide("activeItem", o), provide("stayOpen", a.stayOpen), provide("setActiveItem", r), (s, u) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(n.value),
      ref_key: "accordionRef",
      ref: l
    }, {
      default: withCtx(() => [
        renderSlot(s.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var Hn = ["aria-controls"];
var Gn = {
  name: "MDBAccordionItem"
};
var ts = defineComponent({
  ...Gn,
  props: {
    tag: {
      type: String,
      default: "div"
    },
    collapseId: {
      type: String,
      required: true
    },
    headerTitle: String,
    headerClasses: String,
    bodyClasses: String,
    itemClasses: String,
    icon: String
  },
  setup(e) {
    const t = e, a = ref(null), l = computed(() => ["accordion-item", t.itemClasses]), n = computed(() => ["accordion-header", t.headerClasses]), o = computed(() => ["accordion-body", t.bodyClasses]), r = computed(() => ["accordion-button", !m.value && "collapsed"]), s = computed(() => t.icon ? [t.icon] : false), u = inject(
      "setActiveItem",
      null
    ), c = inject("activeItem", null), i = inject("stayOpen", false), m = ref((c == null ? void 0 : c.value) === t.collapseId);
    watchEffect(() => {
      i || (m.value = (c == null ? void 0 : c.value) === t.collapseId);
    });
    const $ = () => {
      i ? m.value = !m.value : u && (m.value ? u("") : u(t.collapseId));
    };
    return (v, y) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(l.value),
      ref_key: "itemRef",
      ref: a
    }, {
      default: withCtx(() => [
        createBaseVNode("h2", {
          class: normalizeClass(n.value)
        }, [
          createBaseVNode("button", {
            onClick: $,
            class: normalizeClass(r.value),
            "aria-expanded": "true",
            "aria-controls": e.collapseId,
            type: "button"
          }, [
            s.value ? (openBlock(), createElementBlock("i", {
              key: 0,
              class: normalizeClass(s.value)
            }, null, 2)) : createCommentVNode("", true),
            createTextVNode(toDisplayString(e.headerTitle), 1)
          ], 10, Hn)
        ], 2),
        createVNode(fl, {
          id: e.collapseId,
          modelValue: m.value,
          "onUpdate:modelValue": y[0] || (y[0] = (S) => m.value = S)
        }, {
          default: withCtx(() => [
            createBaseVNode("div", {
              class: normalizeClass(o.value)
            }, [
              renderSlot(v.$slots, "default")
            ], 2)
          ]),
          _: 3
        }, 8, ["id", "modelValue"])
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var Un = {
  name: "MDBIcon"
};
var Xn = defineComponent({
  ...Un,
  props: {
    iconStyle: {
      type: String,
      default: "fas"
    },
    icon: String,
    flag: String,
    size: String,
    fw: Boolean,
    solid: Boolean
  },
  setup(e) {
    const t = e, a = computed(() => [
      !t.flag && t.iconStyle,
      t.flag ? `flag flag-${t.flag}` : `fa-${t.icon}`,
      t.size && `fa-${t.size}`,
      t.fw && "fa-fw",
      t.solid && "fa-solid"
    ]);
    return (l, n) => (openBlock(), createElementBlock("i", {
      class: normalizeClass(a.value)
    }, [
      renderSlot(l.$slots, "default")
    ], 2));
  }
});
var Yn = {
  name: "MDBNavbar"
};
var as = defineComponent({
  ...Yn,
  props: {
    tag: {
      type: String,
      default: "nav"
    },
    bg: String,
    dark: {
      type: Boolean,
      default: false
    },
    light: {
      type: Boolean,
      default: false
    },
    double: {
      type: Boolean,
      default: false
    },
    expand: String,
    position: String,
    transparent: {
      type: Boolean,
      default: false
    },
    scrolling: {
      type: Boolean,
      default: false
    },
    scrollingOffset: {
      type: Number,
      default: 100
    },
    center: {
      type: Boolean,
      default: false
    },
    container: {
      type: [Boolean, String],
      default: false
    },
    classContainer: String,
    classNavbar: String
  },
  setup(e) {
    const t = e, a = computed(() => [
      "navbar",
      t.dark && "navbar-dark",
      t.light && "navbar-light",
      t.bg && !t.transparent ? `bg-${t.bg}` : "",
      t.expand ? t.expand === "small" || t.expand === "sm" ? "navbar-expand-sm" : t.expand === "medium" || t.expand === "md" ? "navbar-expand-md" : t.expand === "large" || t.expand === "lg" ? "navbar-expand-lg" : "navbar-expand-xl" : "",
      t.position === "top" ? "fixed-top" : t.position === "bottom" ? "fixed-bottom" : t.position === "sticky" ? "sticky-top" : "",
      t.scrolling && n.value,
      t.double && "double-nav",
      t.center && "justify-content-center",
      t.classNavbar
    ]), l = computed(() => t.container ? [
      t.container !== true ? `container-${t.container}` : "container-fluid",
      t.classContainer && t.classContainer
    ] : false), n = ref("navbar-scroll"), o = () => {
      window.pageYOffset > t.scrollingOffset ? n.value = "navbar-scroll navbar-scrolled" : n.value = "navbar-scroll";
    }, r = ref(null), s = ref("nowrap");
    provide("navbarFlexWrapValue", s);
    const u = () => {
      if (!r.value)
        return;
      const c = getComputedStyle(r.value).flexWrap;
      c === "nowrap" ? s.value = "nowrap" : c === "wrap" && (s.value = "wrap");
    };
    return onMounted(() => (getComputedStyle(r.value) && getComputedStyle(r.value).flexWrap === "wrap" ? s.value = "wrap" : s.value = "nowrap", window.addEventListener("resize", () => u()), t.scrolling && window.addEventListener("scroll", o), () => {
      window.removeEventListener("scroll", o);
    })), (c, i) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      ref_key: "navbar",
      ref: r,
      class: normalizeClass(a.value),
      role: "navigation"
    }, {
      default: withCtx(() => [
        e.container ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(l.value)
        }, [
          renderSlot(c.$slots, "default")
        ], 2)) : createCommentVNode("", true),
        e.container ? createCommentVNode("", true) : renderSlot(c.$slots, "default", { key: 1 })
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var Kn = {
  name: "MDBNavbarToggler"
};
var ls = defineComponent({
  ...Kn,
  props: {
    tag: {
      type: String,
      default: "button"
    },
    target: {
      type: String,
      default: "#navbarSupportedContent"
    },
    togglerClass: String,
    togglerIcon: {
      type: String,
      default: "bars"
    },
    togglerSize: {
      type: String,
      default: "1x"
    },
    iconStyle: {
      type: String,
      default: "fas"
    }
  },
  setup(e) {
    const t = e, a = ref(false), l = computed(() => ["navbar-toggler", t.togglerClass]), n = () => a.value = !a.value;
    return (o, r) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(l.value),
      type: "button",
      "aria-controls": e.target,
      "aria-expanded": a.value,
      "aria-label": "Toggle navigation",
      onClick: n
    }, {
      default: withCtx(() => [
        createVNode(unref(Xn), {
          icon: e.togglerIcon,
          size: e.togglerSize,
          iconStyle: e.iconStyle
        }, null, 8, ["icon", "size", "iconStyle"])
      ]),
      _: 1
    }, 8, ["class", "aria-controls", "aria-expanded"]));
  }
});
var Jn = {
  name: "MDBNavbarBrand"
};
var ns = defineComponent({
  ...Jn,
  props: {
    tag: {
      type: String,
      default: "div"
    }
  },
  setup(e) {
    const t = e, a = useAttrs(), l = computed(() => a.href ? "a" : t.tag);
    return (n, o) => (openBlock(), createBlock(resolveDynamicComponent(l.value), { class: "navbar-brand" }, {
      default: withCtx(() => [
        renderSlot(n.$slots, "default")
      ]),
      _: 3
    }));
  }
});
var Qn = {
  name: "MDBNavbarNav"
};
var os = defineComponent({
  ...Qn,
  props: {
    tag: {
      type: String,
      default: "ul"
    },
    right: {
      type: Boolean,
      default: false
    },
    center: {
      type: Boolean,
      default: false
    },
    vertical: {
      type: Boolean,
      default: false
    },
    justifyAround: {
      type: Boolean,
      default: false
    },
    class: String,
    nav: {
      type: Boolean,
      default: false
    }
  },
  setup(e) {
    const t = e, a = computed(() => [
      t.nav ? "nav" : "navbar-nav",
      t.right ? "ms-auto" : t.center ? "justify-content-center w-100" : t.vertical ? "flex-column" : t.justifyAround ? "justify-content-around w-100" : "me-auto",
      t.class && `${t.class}`
    ]);
    return (l, n) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(a.value)
    }, {
      default: withCtx(() => [
        renderSlot(l.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var Zn = ["href", "target"];
var eo = {
  name: "MDBNavbarItem"
};
var rs = defineComponent({
  ...eo,
  props: {
    tag: {
      type: String,
      default: "li"
    },
    active: {
      type: Boolean,
      default: false
    },
    disabled: Boolean,
    exact: {
      type: Boolean,
      default: false
    },
    newTab: {
      type: Boolean,
      default: false
    },
    to: [Object, String],
    href: String,
    linkClass: String
  },
  setup(e) {
    const t = e, a = computed(() => ["nav-item", !t.to && !t.href && t.active && "active"]), l = computed(() => [
      "nav-link",
      t.disabled && "disabled",
      t.active && "active",
      t.linkClass
    ]), n = computed(() => t.newTab ? "_blank" : "");
    return (o, r) => {
      const s = resolveComponent("router-link");
      return openBlock(), createBlock(resolveDynamicComponent(t.tag), {
        class: normalizeClass(a.value)
      }, {
        default: withCtx(() => [
          e.to ? (openBlock(), createBlock(s, {
            key: 0,
            class: normalizeClass(l.value),
            exact: e.exact,
            to: e.to,
            target: n.value
          }, {
            default: withCtx(() => [
              renderSlot(o.$slots, "default")
            ]),
            _: 3
          }, 8, ["class", "exact", "to", "target"])) : e.href ? (openBlock(), createElementBlock("a", {
            key: 1,
            href: e.href,
            class: normalizeClass(l.value),
            target: n.value
          }, [
            renderSlot(o.$slots, "default")
          ], 10, Zn)) : renderSlot(o.$slots, "default", { key: 2 })
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
var to = {
  name: "MDBPagination"
};
var ss = defineComponent({
  ...to,
  props: {
    tag: {
      type: String,
      default: "ul"
    },
    circle: {
      type: Boolean,
      default: false
    },
    lg: {
      type: Boolean,
      default: false
    },
    sm: {
      type: Boolean,
      default: false
    }
  },
  setup(e) {
    const t = e, a = computed(() => [
      "pagination",
      t.sm && "pagination-sm",
      t.lg && "pagination-lg",
      t.circle && "pagination-circle"
    ]);
    return (l, n) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(a.value)
    }, {
      default: withCtx(() => [
        renderSlot(l.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var ao = ["href", "tabindex", "aria-disabled"];
var lo = { "aria-hidden": "true" };
var no = createBaseVNode("span", { class: "sr-only" }, "Previous", -1);
var oo = ["href", "tabindex", "aria-disabled"];
var ro = { "aria-hidden": "true" };
var so = createBaseVNode("span", { class: "sr-only" }, "Next", -1);
var io = {
  name: "MDBPageNav"
};
var is = defineComponent({
  ...io,
  props: {
    tag: {
      type: String,
      default: "li"
    },
    disabled: {
      type: Boolean,
      default: false
    },
    href: {
      type: String,
      default: "#"
    },
    prev: {
      type: Boolean,
      default: false
    },
    next: {
      type: Boolean,
      default: false
    },
    icon: {
      type: Boolean,
      default: false
    }
  },
  setup(e) {
    const t = e, a = computed(() => ["page-item", t.disabled && "disabled"]), l = computed(() => t.icon ? "«" : "Previous"), n = computed(() => t.icon ? "»" : "Next"), o = computed(() => t.disabled ? "-1" : "false");
    return (r, s) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(a.value)
    }, {
      default: withCtx(() => [
        e.prev ? (openBlock(), createElementBlock("a", {
          key: 0,
          class: "page-link",
          href: e.href,
          tabindex: o.value,
          "aria-disabled": e.disabled,
          "aria-label": "Previous"
        }, [
          createBaseVNode("span", lo, toDisplayString(l.value), 1),
          no
        ], 8, ao)) : createCommentVNode("", true),
        e.next ? (openBlock(), createElementBlock("a", {
          key: 1,
          class: "page-link",
          href: e.href,
          tabindex: o.value,
          "aria-disabled": e.disabled,
          "aria-label": "Next"
        }, [
          createBaseVNode("span", ro, toDisplayString(n.value), 1),
          so
        ], 8, oo)) : createCommentVNode("", true)
      ]),
      _: 1
    }, 8, ["class"]));
  }
});
var uo = ["href", "aria-label", "aria-disabled", "tabindex"];
var co = {
  key: 0,
  "aria-hidden": "true"
};
var fo = {
  key: 1,
  class: "sr-only"
};
var vo = {
  name: "MDBPageItem"
};
var us = defineComponent({
  ...vo,
  props: {
    tag: {
      type: String,
      default: "li"
    },
    active: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    href: String,
    icon: {
      type: Boolean,
      defaul: false
    },
    label: {
      type: String
    }
  },
  setup(e) {
    const t = e, a = computed(() => ["page-item", t.active && "active", t.disabled && "disabled"]), l = computed(() => t.icon && t.label ? t.label : t.href), n = computed(() => t.disabled ? "-1" : " false");
    return (o, r) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(a.value)
    }, {
      default: withCtx(() => [
        createBaseVNode("a", {
          class: "page-link",
          href: e.href,
          "aria-label": l.value,
          "aria-disabled": e.disabled,
          tabindex: n.value
        }, [
          e.icon ? (openBlock(), createElementBlock("span", co, [
            renderSlot(o.$slots, "default")
          ])) : createCommentVNode("", true),
          e.icon ? (openBlock(), createElementBlock("span", fo, toDisplayString(l.value), 1)) : renderSlot(o.$slots, "default", { key: 2 })
        ], 8, uo)
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var po = {
  name: "MDBBreadcrumb"
};
var cs = defineComponent({
  ...po,
  props: {
    tag: {
      type: String,
      default: "ol"
    }
  },
  setup(e) {
    const t = computed(() => ["breadcrumb"]);
    return (a, l) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(t.value)
    }, {
      default: withCtx(() => [
        renderSlot(a.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var mo = {
  name: "MDBBreadcrumbItem"
};
var ds = defineComponent({
  ...mo,
  props: {
    tag: {
      type: String,
      default: "li"
    },
    active: {
      type: Boolean,
      default: false
    },
    current: {
      type: String,
      default: "page"
    }
  },
  setup(e) {
    const t = e, a = computed(() => ["breadcrumb-item", t.active && "active"]), l = computed(() => t.active && t.current);
    return (n, o) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(a.value),
      "aria-current": l.value
    }, {
      default: withCtx(() => [
        renderSlot(n.$slots, "default")
      ]),
      _: 3
    }, 8, ["class", "aria-current"]));
  }
});
var go = {
  name: "MDBFooter"
};
var fs = defineComponent({
  ...go,
  props: {
    tag: {
      type: String,
      default: "footer"
    },
    bg: {
      type: String,
      default: "light"
    },
    text: [String, Array]
  },
  setup(e) {
    const t = e, a = computed(() => {
      const n = t.text;
      return [
        t.bg && t.bg !== "none" && `bg-${t.bg}`,
        t.text && l(n)
      ];
    }), l = (n) => typeof n == "string" ? `text-${n}` : n.map((o) => `text-${o}`.trim()).join(" ");
    return (n, o) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(a.value)
    }, {
      default: withCtx(() => [
        renderSlot(n.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var ho = {
  name: "MDBTabs"
};
var vs = defineComponent({
  ...ho,
  props: {
    tag: {
      type: String,
      default: "div"
    },
    modelValue: String,
    vertical: {
      type: [Boolean, String],
      default: false
    }
  },
  emits: [
    "update:modelValue",
    "hide",
    "hidden",
    "show",
    "shown"
  ],
  setup(e, { emit: t }) {
    const a = e, l = ref(null), n = ref(null), o = ref(a.modelValue);
    watch(
      () => a.modelValue,
      (v) => {
        v !== o.value && (o.value = v, r(null, v));
      }
    );
    const r = (v, y) => {
      v || (v = document.body.querySelector(`#tab-${y}`)), l.value && t("hide", { target: l.value, relatedTarget: v }), t("show", { target: v, relatedTarget: l.value }), t("update:modelValue", y), n.value = v, o.value = y;
    }, s = () => {
      t("shown", { target: n.value, relatedTarget: l.value }), l.value = n.value;
    }, u = () => {
      t("hidden", {
        target: l.value,
        relatedTarget: n.value
      });
    };
    provide("activeTab", o), provide("updateActiveTab", r), provide("emitShown", s), provide("emitHidden", u);
    const c = ref(false), i = ref(window.innerWidth), m = ref(null);
    provide("isVertical", c);
    const $ = () => {
      i.value = window.innerWidth;
      const v = ta(i.value, [
        "column",
        a.vertical
      ]);
      v !== m.value && (c.value = v === a.vertical, m.value = v);
    };
    return onMounted(() => {
      a.vertical && (a.vertical === true ? c.value = true : ($(), ne(window, "resize", $)));
    }), onUnmounted(() => {
      ae(window, "resize", $);
    }), (v, y) => c.value ? (openBlock(), createBlock(resolveDynamicComponent(e.tag), mergeProps({
      key: 0,
      class: "row"
    }, v.$attrs), {
      default: withCtx(() => [
        renderSlot(v.$slots, "default")
      ]),
      _: 3
    }, 16)) : renderSlot(v.$slots, "default", { key: 1 });
  }
});
var yo = {
  name: "MDBTabNav"
};
var ps = defineComponent({
  ...yo,
  props: {
    tag: {
      type: String,
      default: "ul"
    },
    pills: Boolean,
    justify: Boolean,
    fill: Boolean,
    tabsClasses: String,
    col: {
      type: String,
      default: "3"
    }
  },
  setup(e) {
    const t = e, a = inject("isVertical"), l = computed(() => [
      "nav",
      t.pills ? "nav-pills" : "nav-tabs",
      t.justify && "nav-justified",
      t.fill && "nav-fill",
      (a == null ? void 0 : a.value) && "flex-column",
      t.tabsClasses && t.tabsClasses
    ]), n = computed(() => [`col-${t.col}`]);
    return (o, r) => unref(a) ? (openBlock(), createElementBlock("div", {
      key: 0,
      class: normalizeClass(n.value)
    }, [
      (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
        class: normalizeClass(l.value)
      }, {
        default: withCtx(() => [
          renderSlot(o.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"]))
    ], 2)) : (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      key: 1,
      class: normalizeClass(l.value)
    }, {
      default: withCtx(() => [
        renderSlot(o.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var bo = {
  key: 0,
  class: "nav-item",
  role: "presentation"
};
var wo = ["id", "aria-controls", "href", "onClick"];
var ko = {
  name: "MDBTabItem",
  inheritAttrs: false
};
var ms = defineComponent({
  ...ko,
  props: {
    tag: {
      type: String,
      default: "a"
    },
    tabId: {
      type: String,
      required: true
    },
    href: String
  },
  setup(e) {
    const t = e, a = ref(null), l = computed(() => ["nav-link", s.value && "active"]), n = computed(() => `tab-${t.tabId}`), o = computed(() => `${t.tabId}`), r = inject("activeTab"), s = ref(r && r.value === t.tabId), u = inject("updateActiveTab");
    watchEffect(
      () => s.value = r && r.value === t.tabId
    );
    const c = () => {
      a.value !== void 0 && u && u(a.value, t.tabId);
    };
    return onMounted(() => {
      s.value && u && u(a.value, t.tabId);
    }), (i, m) => e.href ? (openBlock(), createElementBlock("li", bo, [
      createBaseVNode("a", mergeProps({
        id: n.value,
        ref_key: "item",
        ref: a,
        class: l.value,
        role: "tab",
        "aria-controls": o.value,
        href: e.href
      }, i.$attrs, {
        onClick: withModifiers(c, ["prevent"])
      }), [
        renderSlot(i.$slots, "default")
      ], 16, wo)
    ])) : (openBlock(), createBlock(resolveDynamicComponent(e.tag), mergeProps({
      key: 1,
      id: n.value,
      ref_key: "item",
      ref: a,
      class: l.value,
      role: "tab",
      "aria-controls": o.value
    }, i.$attrs, {
      onClick: withModifiers(c, ["prevent"])
    }), {
      default: withCtx(() => [
        renderSlot(i.$slots, "default")
      ]),
      _: 3
    }, 16, ["id", "class", "aria-controls", "onClick"]));
  }
});
var Bo = {
  name: "MDBTabPane"
};
var gs = defineComponent({
  ...Bo,
  props: {
    tag: {
      type: String,
      default: "div"
    },
    tabId: {
      type: String,
      required: true
    }
  },
  setup(e) {
    const t = e, a = ref(null), l = computed(() => [
      "tab-pane fade",
      s.value && "show active"
    ]), n = computed(() => `${t.tabId}`), o = computed(() => `tab-${t.tabId}`), r = inject("activeTab"), s = ref(r && r.value === t.tabId);
    watchEffect(
      () => s.value = r && r.value === t.tabId
    );
    const u = inject("emitShown"), c = inject("emitHidden");
    onMounted(() => {
      s.value && u && u(t.tabId);
    });
    const i = (y) => {
      const S = y;
      S.style.opacity = "1";
    }, m = (y) => {
      const S = y;
      S.style.opacity = "0", u && u(t.tabId);
    }, $ = (y) => {
      const S = y;
      S.style.opacity = "1", c && c(t.tabId);
    }, v = (y) => {
      const S = y;
      S.style.opacity = "0";
    };
    return (y, S) => (openBlock(), createBlock(Transition, {
      duration: 150,
      onEnter: m,
      onAfterEnter: i,
      onBeforeLeave: $,
      onAfterLeave: v
    }, {
      default: withCtx(() => [
        withDirectives((openBlock(), createBlock(resolveDynamicComponent(e.tag), {
          id: n.value,
          ref_key: "item",
          ref: a,
          class: normalizeClass(l.value),
          role: "tabpanel",
          "aria-labelledby": o.value
        }, {
          default: withCtx(() => [
            renderSlot(y.$slots, "default")
          ]),
          _: 3
        }, 8, ["id", "class", "aria-labelledby"])), [
          [vShow, s.value]
        ])
      ]),
      _: 3
    }));
  }
});
var $o = {
  name: "MDBTabContent",
  inheritAttrs: false
};
var hs = defineComponent({
  ...$o,
  props: {
    tag: {
      type: String,
      default: "div"
    },
    col: {
      type: String,
      default: "9"
    },
    contentClasses: String
  },
  setup(e) {
    const t = e, a = inject("isVertical", false), l = computed(() => ["tab-content", t.contentClasses && t.contentClasses]), n = computed(() => [`col-${t.col}`]);
    return (o, r) => (openBlock(), createBlock(KeepAlive, null, [
      unref(a) ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass(n.value)
      }, [
        (openBlock(), createBlock(resolveDynamicComponent(e.tag), mergeProps({ class: l.value }, o.$attrs), {
          default: withCtx(() => [
            renderSlot(o.$slots, "default")
          ]),
          _: 3
        }, 16, ["class"]))
      ], 2)) : (openBlock(), createBlock(resolveDynamicComponent(e.tag), mergeProps({
        key: 1,
        class: l.value
      }, o.$attrs), {
        default: withCtx(() => [
          renderSlot(o.$slots, "default")
        ]),
        _: 3
      }, 16, ["class"]))
    ], 1024));
  }
});
var So = {
  name: "MDBCol"
};
var ys = defineComponent({
  ...So,
  props: {
    tag: {
      type: String,
      default: "div"
    },
    col: String,
    sm: String,
    md: String,
    lg: String,
    xl: String,
    offset: String,
    offsetSm: String,
    offsetMd: String,
    offsetLg: String,
    offsetXl: String,
    auto: {
      type: Boolean,
      default: false
    }
  },
  setup(e) {
    const t = e, a = computed(() => [
      t.col ? "col-" + t.col : "",
      t.sm ? "col-sm-" + t.sm : "",
      t.md ? "col-md-" + t.md : "",
      t.lg ? "col-lg-" + t.lg : "",
      t.xl ? "col-xl-" + t.xl : "",
      !t.col && !t.sm && !t.md && !t.lg && !t.xl ? "col" : "",
      t.offset ? "offset-" + t.offset : "",
      t.offsetSm ? "offset-sm-" + t.offsetSm : "",
      t.offsetMd ? "offset-md-" + t.offsetMd : "",
      t.offsetLg ? "offset-lg-" + t.offsetLg : "",
      t.offsetXl ? "offset-xl-" + t.offsetXl : "",
      t.auto ? "col-auto" : ""
    ]);
    return (l, n) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(a.value)
    }, {
      default: withCtx(() => [
        renderSlot(l.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var xo = {
  name: "MDBRow"
};
var bs = defineComponent({
  ...xo,
  props: {
    tag: {
      type: String,
      default: "div"
    },
    start: {
      type: Boolean,
      default: false
    },
    end: {
      type: Boolean,
      default: false
    },
    center: {
      type: Boolean,
      default: false
    },
    between: {
      type: Boolean,
      default: false
    },
    around: {
      type: Boolean,
      default: false
    },
    cols: [String, Array]
  },
  setup(e) {
    const t = e, a = computed(() => {
      const n = t.cols;
      return [
        "row",
        t.cols && n ? `${l(n)}` : "",
        t.start && "justify-content-start",
        t.end && "justify-content-end",
        t.center && "justify-content-center",
        t.between && "justify-content-between",
        t.around && "justify-content-around"
      ];
    }), l = (n) => typeof n == "string" ? `row-cols-${n}` : n.map((o) => `row-cols-${o}`.trim()).join(" ");
    return (n, o) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(a.value)
    }, {
      default: withCtx(() => [
        renderSlot(n.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var Co = {
  name: "MDBContainer"
};
var ws = defineComponent({
  ...Co,
  props: {
    tag: {
      type: String,
      default: "div"
    },
    sm: {
      type: Boolean,
      default: false
    },
    md: {
      type: Boolean,
      default: false
    },
    lg: {
      type: Boolean,
      default: false
    },
    xl: {
      type: Boolean,
      default: false
    },
    xxl: {
      type: Boolean,
      default: false
    },
    fluid: {
      type: Boolean,
      default: false
    }
  },
  setup(e) {
    const t = e, a = computed(() => [
      t.fluid ? "container-fluid" : "",
      t.sm ? "container-sm" : "",
      t.md ? "container-md" : "",
      t.lg ? "container-lg" : "",
      t.xl ? "container-xl" : "",
      t.xxl ? "container-xxl" : "",
      !t.fluid && !t.sm && !t.md && !t.lg && !t.xl && !t.xxl ? "container" : ""
    ]);
    return (l, n) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(a.value)
    }, {
      default: withCtx(() => [
        renderSlot(l.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var Mo = {
  name: "MDBTable",
  inheritAttrs: false
};
var ks = defineComponent({
  ...Mo,
  props: {
    tag: {
      type: String,
      default: "table"
    },
    variant: String,
    dark: {
      type: Boolean,
      default: false
    },
    light: {
      type: Boolean,
      default: false
    },
    border: {
      type: [Boolean, String],
      default: false
    },
    borderless: {
      type: Boolean,
      default: false
    },
    striped: {
      type: Boolean,
      default: false
    },
    hover: {
      type: Boolean,
      default: false
    },
    responsive: {
      type: [Boolean, String],
      default: false
    },
    align: String,
    sm: {
      type: Boolean,
      default: false
    },
    tableStyle: String,
    captionTop: {
      type: Boolean,
      default: false
    }
  },
  setup(e) {
    const t = e, a = computed(() => t.responsive ? t.responsive !== true ? `table-responsive-${t.responsive}` : "table-responsive" : false), l = computed(() => t.border ? t.border !== true ? `table-bordered border-${t.border}` : "table-bordered" : ""), n = computed(() => [
      "table",
      t.dark && "table-dark",
      t.light && "table-light",
      t.variant && `table-${t.variant}`,
      t.striped && "table-striped",
      l.value,
      t.borderless && "table-borderless",
      t.hover && "table-hover",
      t.sm && "table-sm",
      t.align && t.align === "top" ? "align-top" : t.align === "bottom" ? "align-bottom" : t.align === "middle" ? "align-middle" : "",
      t.captionTop && "caption-top",
      t.tableStyle
    ]);
    return (o, r) => e.responsive ? (openBlock(), createElementBlock("div", {
      key: 0,
      class: normalizeClass(a.value)
    }, [
      (openBlock(), createBlock(resolveDynamicComponent(e.tag), mergeProps({
        class: n.value,
        style: e.tableStyle
      }, o.$attrs), {
        default: withCtx(() => [
          renderSlot(o.$slots, "default")
        ]),
        _: 3
      }, 16, ["class", "style"]))
    ], 2)) : (openBlock(), createBlock(resolveDynamicComponent(e.tag), mergeProps({
      key: 1,
      class: n.value,
      style: e.tableStyle
    }, o.$attrs), {
      default: withCtx(() => [
        renderSlot(o.$slots, "default")
      ]),
      _: 3
    }, 16, ["class", "style"]));
  }
});
var Vo = ["id", "value"];
var Do = ["for"];
var Oo = {
  key: 2,
  class: "form-helper"
};
var Eo = {
  key: 3,
  class: "form-helper"
};
var No = { class: "form-counter" };
var To = createBaseVNode("div", { class: "form-notch-trailing" }, null, -1);
var Ao = ["id", "value"];
var Lo = ["for"];
var _o = {
  key: 1,
  class: "form-helper"
};
var Io = {
  key: 2,
  class: "form-helper"
};
var Po = { class: "form-counter" };
var Fo = createBaseVNode("div", { class: "form-notch-trailing" }, null, -1);
var Ro = {
  key: 9,
  class: "form-text"
};
var qo = {
  name: "MDBInput",
  inheritAttrs: false
};
var qt = defineComponent({
  ...qo,
  props: {
    id: String,
    label: String,
    labelClass: String,
    modelValue: [String, Number, Date],
    size: String,
    formOutline: {
      type: Boolean,
      default: true
    },
    wrapperClass: String,
    inputGroup: {
      type: [Boolean, String],
      default: false
    },
    wrap: {
      type: Boolean,
      default: true
    },
    formText: String,
    white: Boolean,
    validationEvent: String,
    isValidated: Boolean,
    isValid: Boolean,
    validFeedback: String,
    invalidFeedback: String,
    tooltipFeedback: {
      type: Boolean,
      default: false
    },
    tag: {
      type: String,
      default: "div"
    },
    helper: String,
    counter: Boolean,
    maxlength: {
      type: Number,
      default: 0
    }
  },
  emits: ["update:modelValue", "click-outside", "on-validate"],
  setup(e, { expose: t, emit: a }) {
    const l = e, n = useAttrs(), o = ref(null), r = ref(l.modelValue), s = ref(null), u = ref(false), c = ref(9), i = ref(0), m = l.id || xe("MDBInput-"), $ = ref(false), v = computed(() => [
      l.formOutline && "form-outline",
      k.value,
      l.white && "form-white",
      l.wrapperClass
    ]), y = computed(() => [
      "form-control",
      l.size ? `form-control-${l.size}` : l.inputGroup && l.inputGroup !== true && `form-control-${l.inputGroup}`,
      (r.value || r.value === 0) && "active",
      u.value && "placeholder-active",
      T.value && I.value && "is-valid",
      T.value && !I.value && "is-invalid",
      x.value && S()
    ]), S = () => x.value ? r.value || r.value === 0 || $.value ? "opacity-1" : "opacity-0" : "", h = computed(() => ["form-label", l.labelClass]), k = computed(() => {
      if (l.inputGroup)
        return l.inputGroup !== true ? `input-group input-group-${l.inputGroup}` : "input-group";
    }), L = computed(() => l.inputGroup && T.value ? { marginBottom: "1rem" } : ""), M = computed(() => l.tooltipFeedback ? "valid-tooltip" : "valid-feedback"), w = computed(() => l.tooltipFeedback ? "invalid-tooltip" : "invalid-feedback"), T = ref(l.isValidated), I = ref(l.isValid), R = ref(""), W = computed(() => T.value && !I.value && l.validationEvent ? R.value : l.invalidFeedback), G = (U) => {
      const J = U.target;
      I.value = J.checkValidity(), I.value || (R.value = J.validationMessage), T.value = true, a("on-validate", I.value);
    }, F = () => {
      l.validationEvent !== "submit" && o.value && l.validationEvent && ne(o.value, l.validationEvent, G);
    };
    function E() {
      s.value && (i.value = s.value.clientWidth * 0.8 + 8);
    }
    const P = computed(() => l.label && s.value && i.value === 8 && s.value.textContent !== ""), x = computed(() => [
      "date",
      "time",
      "datetime-local",
      "month",
      "week"
    ].includes(n.type));
    function _() {
      n.placeholder && !s.value ? u.value = true : u.value = false;
    }
    const K = ref(null);
    K.value = typeof r.value == "string" && r.value ? r.value.length : 0;
    function B(U) {
      const J = U.target;
      if (l.maxlength && J.value.length > l.maxlength && typeof r.value == "string") {
        J.value = r.value;
        return;
      }
      K.value = J.value.length, r.value = J.value, a("update:modelValue", r.value);
    }
    function j() {
      be(true), $.value = true, l.label && P.value && E();
    }
    function X() {
      be(), $.value = false;
    }
    function Y() {
      a("click-outside");
    }
    const se = ref(null), ie = ref(null), ue = (U) => {
      ie.value && ie.value.forEach(
        (J) => J.style.opacity = U ? "0" : "1"
      ), U && se.value && (se.value.style.opacity = "1");
    }, Te = n.type && n.type === "date", be = (U = false) => {
      var J;
      l.label && l.formOutline && ie.value && ((J = ie.value) == null ? void 0 : J.length) > 1 && ue(U), Te && o.value && (o.value.type = U ? "date" : "text");
    }, we = (U) => ![...U.parentNode.children].findIndex(
      (J) => J === U
    );
    return onMounted(() => {
      var U;
      if (E(), _(), be(), l.label && l.formOutline && o.value && (ie.value = ((U = o.value.parentNode) == null ? void 0 : U.querySelectorAll(".form-notch")) || null), l.label && l.formOutline && s.value && o.value && !we(o.value)) {
        const J = parseFloat(getComputedStyle(s.value).left);
        s.value.style.left = `${J + o.value.offsetLeft}px`, c.value += o.value.offsetLeft;
      }
      l.validationEvent && F();
    }), onUpdated(() => {
      E(), _();
    }), onUnmounted(() => {
      o.value && l.validationEvent && ae(o.value, l.validationEvent, G);
    }), watchEffect(() => {
      var U, J;
      if (typeof l.modelValue == "string") {
        if (l.maxlength && ((U = l.modelValue) == null ? void 0 : U.length) > l.maxlength) {
          r.value = l.modelValue.slice(0, l.maxlength), K.value = l.maxlength;
          return;
        }
        K.value = ((J = l.modelValue) == null ? void 0 : J.length) || 0;
      }
      r.value = l.modelValue;
    }), watch(
      () => l.isValidated,
      (U) => T.value = U
    ), watch(
      () => l.isValid,
      (U) => I.value = U
    ), t({
      inputRef: o
    }), (U, J) => (openBlock(), createElementBlock(Fragment, null, [
      e.wrap ? createCommentVNode("", true) : withDirectives((openBlock(), createElementBlock("input", mergeProps({
        key: 0,
        class: y.value,
        id: unref(m),
        value: r.value
      }, U.$attrs, {
        onInput: B,
        ref_key: "inputRef",
        ref: o,
        onFocus: j,
        onBlur: X
      }), null, 16, Vo)), [
        [unref(Ze), Y]
      ]),
      e.label && !e.wrap ? (openBlock(), createElementBlock("label", {
        key: 1,
        ref_key: "labelRef",
        ref: s,
        class: normalizeClass(h.value),
        for: unref(m)
      }, toDisplayString(e.label), 11, Do)) : createCommentVNode("", true),
      !e.wrap && e.helper ? (openBlock(), createElementBlock("div", Oo, toDisplayString(e.helper), 1)) : createCommentVNode("", true),
      !e.wrap && e.counter ? (openBlock(), createElementBlock("div", Eo, [
        createBaseVNode("div", No, toDisplayString(K.value) + " / " + toDisplayString(e.maxlength), 1)
      ])) : createCommentVNode("", true),
      e.wrap ? createCommentVNode("", true) : renderSlot(U.$slots, "default", { key: 4 }),
      !e.wrap && e.validFeedback ? (openBlock(), createElementBlock("div", {
        key: 5,
        class: normalizeClass(M.value)
      }, toDisplayString(e.validFeedback), 3)) : createCommentVNode("", true),
      !e.wrap && W.value ? (openBlock(), createElementBlock("div", {
        key: 6,
        class: normalizeClass(w.value)
      }, toDisplayString(W.value), 3)) : createCommentVNode("", true),
      !e.wrap && e.formOutline ? (openBlock(), createElementBlock("div", {
        key: 7,
        class: "form-notch",
        ref_key: "notchRef",
        ref: se
      }, [
        createBaseVNode("div", {
          class: "form-notch-leading",
          style: normalizeStyle({ width: `${c.value}px` })
        }, null, 4),
        createBaseVNode("div", {
          class: "form-notch-middle",
          style: normalizeStyle({ width: `${i.value}px` })
        }, null, 4),
        To
      ], 512)) : createCommentVNode("", true),
      e.wrap ? withDirectives((openBlock(), createBlock(resolveDynamicComponent(e.tag), {
        key: 8,
        class: normalizeClass(v.value),
        style: normalizeStyle(L.value)
      }, {
        default: withCtx(() => [
          renderSlot(U.$slots, "prepend"),
          createBaseVNode("input", mergeProps({ class: y.value }, U.$attrs, {
            id: unref(m),
            value: r.value,
            onInput: B,
            ref_key: "inputRef",
            ref: o,
            onFocus: j,
            onBlur: X
          }), null, 16, Ao),
          e.label ? (openBlock(), createElementBlock("label", {
            key: 0,
            ref_key: "labelRef",
            ref: s,
            class: normalizeClass(h.value),
            for: unref(m)
          }, toDisplayString(e.label), 11, Lo)) : createCommentVNode("", true),
          e.helper ? (openBlock(), createElementBlock("div", _o, toDisplayString(e.helper), 1)) : createCommentVNode("", true),
          e.counter ? (openBlock(), createElementBlock("div", Io, [
            createBaseVNode("div", Po, toDisplayString(K.value) + " / " + toDisplayString(e.maxlength), 1)
          ])) : createCommentVNode("", true),
          renderSlot(U.$slots, "default"),
          e.validFeedback ? (openBlock(), createElementBlock("div", {
            key: 3,
            class: normalizeClass(M.value)
          }, toDisplayString(e.validFeedback), 3)) : createCommentVNode("", true),
          W.value ? (openBlock(), createElementBlock("div", {
            key: 4,
            class: normalizeClass(w.value)
          }, toDisplayString(W.value), 3)) : createCommentVNode("", true),
          e.formOutline ? (openBlock(), createElementBlock("div", {
            key: 5,
            class: "form-notch",
            ref_key: "notchRef",
            ref: se
          }, [
            createBaseVNode("div", {
              class: "form-notch-leading",
              style: normalizeStyle({ width: `${c.value}px` })
            }, null, 4),
            createBaseVNode("div", {
              class: "form-notch-middle",
              style: normalizeStyle({ width: `${i.value}px` })
            }, null, 4),
            Fo
          ], 512)) : createCommentVNode("", true)
        ]),
        _: 3
      }, 8, ["class", "style"])), [
        [unref(Ze), Y]
      ]) : createCommentVNode("", true),
      e.formText ? (openBlock(), createElementBlock("div", Ro, toDisplayString(e.formText), 1)) : createCommentVNode("", true)
    ], 64));
  }
});
var jo = ["id", "value", "rows"];
var zo = ["for"];
var Wo = {
  key: 2,
  class: "form-helper"
};
var Ho = {
  key: 3,
  class: "form-helper"
};
var Go = { class: "form-counter" };
var Uo = ["id", "value", "rows"];
var Xo = ["for"];
var Yo = {
  key: 1,
  class: "form-helper"
};
var Ko = {
  key: 2,
  class: "form-helper"
};
var Jo = { class: "form-counter" };
var Qo = {
  key: 5,
  class: "form-notch"
};
var Zo = createBaseVNode("div", { class: "form-notch-trailing" }, null, -1);
var er = {
  key: 8,
  class: "form-text"
};
var tr = {
  name: "MDBTextarea",
  inheritAttrs: false
};
var Bs = defineComponent({
  ...tr,
  props: {
    id: String,
    rows: {
      type: [String, Number],
      default: 4
    },
    label: String,
    modelValue: [String, Number],
    size: String,
    formOutline: {
      type: Boolean,
      default: true
    },
    wrapperClass: String,
    inputGroup: {
      type: [Boolean, String],
      default: false
    },
    wrap: {
      type: Boolean,
      default: true
    },
    formText: String,
    white: Boolean,
    validationEvent: String,
    isValidated: Boolean,
    isValid: Boolean,
    validFeedback: String,
    invalidFeedback: String,
    tooltipFeedback: {
      type: Boolean,
      default: false
    },
    tag: {
      type: String,
      default: "div"
    },
    helper: String,
    counter: Boolean,
    maxLength: {
      type: Number,
      default: 0
    }
  },
  emits: ["update:modelValue", "on-validate"],
  setup(e, { emit: t }) {
    const a = e, l = useAttrs(), n = ref(null), o = ref(a.modelValue), r = ref(null), s = ref(false), u = ref(9), c = ref(0), i = a.id || xe("MDBTextarea-"), m = computed(() => [
      a.formOutline && "form-outline",
      v.value,
      a.white && "form-white",
      a.wrapperClass
    ]), $ = computed(() => [
      "form-control",
      a.size && `form-control-${a.size}`,
      o.value && "active",
      s.value && "placeholder-active",
      k.value && L.value && "is-valid",
      k.value && !L.value && "is-invalid"
    ]), v = computed(() => {
      if (a.inputGroup)
        return a.inputGroup !== true ? `input-group input-group-${a.inputGroup}` : "input-group";
    }), y = computed(() => a.inputGroup && k.value ? { marginBottom: "1rem" } : ""), S = computed(() => a.tooltipFeedback ? "valid-tooltip" : "valid-feedback"), h = computed(() => a.tooltipFeedback ? "invalid-tooltip" : "invalid-feedback"), k = ref(a.isValidated), L = ref(a.isValid), M = ref(""), w = computed(() => k.value && !L.value && a.validationEvent ? M.value : a.invalidFeedback), T = (P) => {
      const x = P.target;
      L.value = x.checkValidity(), L.value || (M.value = x.validationMessage), k.value = true, t("on-validate", L.value);
    }, I = () => {
      a.validationEvent !== "submit" && n.value && a.validationEvent && ne(n.value, a.validationEvent, T);
    };
    function R() {
      r.value && (c.value = r.value.clientWidth * 0.8 + 8);
    }
    function W() {
      l.placeholder && !r.value ? s.value = true : s.value = false;
    }
    const G = ref(null);
    G.value = typeof o.value == "string" && o.value ? o.value.length : 0;
    function F(P) {
      const x = P.target;
      if (a.counter) {
        if (x.value.length > a.maxLength) {
          typeof o.value == "string" && (x.value = o.value);
          return;
        }
        G.value = x.value.length;
      }
      o.value = x.value, t("update:modelValue", o.value);
    }
    const E = (P) => ![...P.parentNode.children].findIndex(
      (x) => x === P
    );
    return onMounted(() => {
      if (R(), W(), a.label && a.formOutline && r.value && n.value && !E(n.value)) {
        const P = parseFloat(getComputedStyle(r.value).left);
        r.value.style.left = `${P + n.value.offsetLeft}px`, u.value += n.value.offsetLeft;
      }
      a.validationEvent && I();
    }), onUpdated(() => {
      R(), W();
    }), onUnmounted(() => {
      n.value && a.validationEvent && ae(n.value, a.validationEvent, T);
    }), watchEffect(() => {
      var P;
      if (a.counter) {
        if (typeof a.modelValue == "string" && ((P = a.modelValue) == null ? void 0 : P.length) > a.maxLength) {
          o.value = a.modelValue.slice(0, a.maxLength), G.value = a.maxLength;
          return;
        }
        G.value = typeof a.modelValue == "string" && a.modelValue ? a.modelValue.length : 0;
      }
      o.value = a.modelValue;
    }), watch(
      () => a.isValidated,
      (P) => k.value = P
    ), watch(
      () => a.isValid,
      (P) => L.value = P
    ), (P, x) => (openBlock(), createElementBlock(Fragment, null, [
      e.wrap ? createCommentVNode("", true) : (openBlock(), createElementBlock("textarea", mergeProps({
        key: 0,
        class: $.value
      }, P.$attrs, {
        id: unref(i),
        value: o.value,
        onInput: F,
        rows: e.rows,
        ref_key: "textareaRef",
        ref: n
      }), null, 16, jo)),
      e.label && !e.wrap ? (openBlock(), createElementBlock("label", {
        key: 1,
        ref_key: "labelRef",
        ref: r,
        class: "form-label",
        for: unref(i)
      }, toDisplayString(e.label), 9, zo)) : createCommentVNode("", true),
      !e.wrap && e.helper ? (openBlock(), createElementBlock("div", Wo, toDisplayString(e.helper), 1)) : createCommentVNode("", true),
      !e.wrap && e.counter ? (openBlock(), createElementBlock("div", Ho, [
        createBaseVNode("div", Go, toDisplayString(G.value) + " / " + toDisplayString(e.maxLength), 1)
      ])) : createCommentVNode("", true),
      e.wrap ? createCommentVNode("", true) : renderSlot(P.$slots, "default", { key: 4 }),
      !e.wrap && e.validFeedback ? (openBlock(), createElementBlock("div", {
        key: 5,
        class: normalizeClass(S.value)
      }, toDisplayString(e.validFeedback), 3)) : createCommentVNode("", true),
      !e.wrap && w.value ? (openBlock(), createElementBlock("div", {
        key: 6,
        class: normalizeClass(h.value)
      }, toDisplayString(w.value), 3)) : createCommentVNode("", true),
      e.wrap ? (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
        key: 7,
        class: normalizeClass(m.value),
        style: normalizeStyle(y.value)
      }, {
        default: withCtx(() => [
          renderSlot(P.$slots, "prepend"),
          createBaseVNode("textarea", mergeProps({ class: $.value }, P.$attrs, {
            id: unref(i),
            value: o.value,
            onInput: F,
            rows: e.rows,
            ref_key: "textareaRef",
            ref: n
          }), null, 16, Uo),
          e.label ? (openBlock(), createElementBlock("label", {
            key: 0,
            ref_key: "labelRef",
            ref: r,
            class: "form-label",
            for: unref(i)
          }, toDisplayString(e.label), 9, Xo)) : createCommentVNode("", true),
          e.helper ? (openBlock(), createElementBlock("div", Yo, toDisplayString(e.helper), 1)) : createCommentVNode("", true),
          e.counter ? (openBlock(), createElementBlock("div", Ko, [
            createBaseVNode("div", Jo, toDisplayString(G.value) + " / " + toDisplayString(e.maxLength), 1)
          ])) : createCommentVNode("", true),
          e.validFeedback ? (openBlock(), createElementBlock("div", {
            key: 3,
            class: normalizeClass(S.value)
          }, toDisplayString(e.validFeedback), 3)) : createCommentVNode("", true),
          w.value ? (openBlock(), createElementBlock("div", {
            key: 4,
            class: normalizeClass(h.value)
          }, toDisplayString(w.value), 3)) : createCommentVNode("", true),
          e.formOutline ? (openBlock(), createElementBlock("div", Qo, [
            createBaseVNode("div", {
              class: "form-notch-leading",
              style: normalizeStyle({ width: `${u.value}px` })
            }, null, 4),
            createBaseVNode("div", {
              class: "form-notch-middle",
              style: normalizeStyle({ width: `${c.value}px` })
            }, null, 4),
            Zo
          ])) : createCommentVNode("", true)
        ]),
        _: 3
      }, 8, ["class", "style"])) : createCommentVNode("", true),
      e.formText ? (openBlock(), createElementBlock("div", er, toDisplayString(e.formText), 1)) : createCommentVNode("", true)
    ], 64));
  }
});
var ar = ["id", "checked", "required", "aria-required"];
var lr = ["for", "innerHTML"];
var nr = ["id", "checked", "required", "aria-required"];
var or = ["for", "innerHTML"];
var rr = {
  name: "MDBCheckbox",
  inheritAttrs: false
};
var $s = defineComponent({
  ...rr,
  props: {
    id: String,
    label: String,
    modelValue: Boolean,
    inline: Boolean,
    wrapperClass: String,
    labelClass: String,
    inputClass: String,
    btnCheck: Boolean,
    required: Boolean,
    validateOnChange: Boolean,
    isValidated: Boolean,
    isValid: Boolean,
    validFeedback: String,
    invalidFeedback: String,
    tooltipFeedback: {
      type: Boolean,
      default: false
    },
    wrap: {
      type: Boolean,
      default: true
    },
    formCheck: {
      type: Boolean,
      default: true
    },
    tag: {
      type: String,
      default: "div"
    }
  },
  emits: ["update:modelValue", "on-validate"],
  setup(e, { emit: t }) {
    const a = e, l = ref("inputRef"), n = ref(a.modelValue), o = a.id || xe("MDBCheckbox-"), r = computed(() => [
      a.formCheck && !a.btnCheck ? "form-check" : "",
      a.inline && "form-check-inline",
      a.wrapperClass
    ]), s = computed(() => [
      a.btnCheck ? "btn-check" : "form-check-input",
      a.inputClass && a.inputClass,
      m.value && $.value && "is-valid",
      m.value && !$.value && "is-invalid"
    ]), u = computed(() => [a.labelClass || "form-check-label"]), c = computed(() => a.tooltipFeedback ? "valid-tooltip" : "valid-feedback"), i = computed(() => a.tooltipFeedback ? "invalid-tooltip" : "invalid-feedback"), m = ref(a.isValidated), $ = ref(a.isValid), v = (h) => {
      const k = h.target;
      $.value = k.checkValidity(), m.value = true, t("on-validate", $.value);
    }, y = () => {
      ne(l.value, "change", v);
    };
    function S() {
      n.value = !n.value, t("update:modelValue", n.value);
    }
    return onMounted(() => {
      a.validateOnChange && y();
    }), onUnmounted(() => {
      ae(l.value, "change", v);
    }), watchEffect(() => n.value = a.modelValue), watch(
      () => a.isValidated,
      (h) => m.value = h
    ), watch(
      () => a.isValid,
      (h) => $.value = h
    ), (h, k) => (openBlock(), createElementBlock(Fragment, null, [
      e.wrap ? (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
        key: 0,
        class: normalizeClass(r.value)
      }, {
        default: withCtx(() => [
          createBaseVNode("input", mergeProps({
            class: s.value,
            type: "checkbox"
          }, h.$attrs, {
            id: unref(o),
            checked: n.value,
            onChange: S,
            required: e.required ? true : void 0,
            "aria-required": e.required,
            ref_key: "inputRef",
            ref: l
          }), null, 16, ar),
          e.label ? (openBlock(), createElementBlock("label", {
            key: 0,
            class: normalizeClass(u.value),
            for: unref(o),
            innerHTML: e.label
          }, null, 10, lr)) : createCommentVNode("", true),
          e.validFeedback ? (openBlock(), createElementBlock("div", {
            key: 1,
            class: normalizeClass(c.value)
          }, toDisplayString(e.validFeedback), 3)) : createCommentVNode("", true),
          e.invalidFeedback ? (openBlock(), createElementBlock("div", {
            key: 2,
            class: normalizeClass(i.value)
          }, toDisplayString(e.invalidFeedback), 3)) : createCommentVNode("", true)
        ]),
        _: 1
      }, 8, ["class"])) : createCommentVNode("", true),
      e.wrap ? createCommentVNode("", true) : (openBlock(), createElementBlock("input", mergeProps({
        key: 1,
        class: s.value,
        type: "checkbox"
      }, h.$attrs, {
        id: unref(o),
        checked: n.value,
        onChange: S,
        required: e.required ? true : void 0,
        "aria-required": e.required,
        ref_key: "inputRef",
        ref: l
      }), null, 16, nr)),
      !e.wrap && e.label ? (openBlock(), createElementBlock("label", {
        key: 2,
        class: normalizeClass(u.value),
        for: unref(o),
        innerHTML: e.label
      }, null, 10, or)) : createCommentVNode("", true),
      !e.wrap && e.validFeedback ? (openBlock(), createElementBlock("div", {
        key: 3,
        class: normalizeClass(c.value)
      }, toDisplayString(e.validFeedback), 3)) : createCommentVNode("", true),
      !e.wrap && e.invalidFeedback ? (openBlock(), createElementBlock("div", {
        key: 4,
        class: normalizeClass(i.value)
      }, toDisplayString(e.invalidFeedback), 3)) : createCommentVNode("", true)
    ], 64));
  }
});
var sr = ["id", "required", "aria-required"];
var ir = ["for"];
var ur = ["id", "required", "aria-required"];
var cr = ["for"];
var dr = {
  name: "MDBRadio",
  inheritAttrs: false
};
var Ss = defineComponent({
  ...dr,
  props: {
    id: String,
    label: String,
    inline: Boolean,
    modelValue: String,
    wrapperClass: String,
    labelClass: String,
    btnCheck: Boolean,
    required: Boolean,
    validateOnChange: Boolean,
    isValidated: Boolean,
    isValid: Boolean,
    validFeedback: String,
    invalidFeedback: String,
    tooltipFeedback: {
      type: Boolean,
      default: false
    },
    wrap: {
      type: Boolean,
      default: true
    },
    formCheck: {
      type: Boolean,
      default: true
    },
    tag: {
      type: String,
      default: "div"
    }
  },
  emits: ["update:modelValue", "on-validate"],
  setup(e, { emit: t }) {
    const a = e, l = ref("inputRef"), n = ref(a.modelValue || false), o = a.id || xe("MDBRadio-"), r = computed(() => [
      a.formCheck && !a.btnCheck ? "form-check" : "",
      a.inline && "form-check-inline",
      a.wrapperClass
    ]), s = computed(() => [
      a.btnCheck ? "btn-check" : "form-check-input",
      m.value && $.value && "is-valid",
      m.value && !$.value && "is-invalid"
    ]), u = computed(() => [a.labelClass || "form-check-label"]), c = computed(() => a.tooltipFeedback ? "valid-tooltip" : "valid-feedback"), i = computed(() => a.tooltipFeedback ? "invalid-tooltip" : "invalid-feedback"), m = ref(a.isValidated), $ = ref(a.isValid), v = (h) => {
      const k = h.target;
      $.value = k.checkValidity(), m.value = true, t("on-validate", $.value);
    }, y = () => {
      ne(l.value, "change", v);
    };
    function S(h) {
      const k = h.target;
      t("update:modelValue", k.value);
    }
    return onMounted(() => {
      a.validateOnChange && y();
    }), onUnmounted(() => {
      ae(l.value, "change", v);
    }), watchEffect(() => n.value = a.modelValue), watch(
      () => a.isValidated,
      (h) => m.value = h
    ), watch(
      () => a.isValid,
      (h) => $.value = h
    ), (h, k) => (openBlock(), createElementBlock(Fragment, null, [
      e.wrap ? (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
        key: 0,
        class: normalizeClass(r.value)
      }, {
        default: withCtx(() => [
          withDirectives(createBaseVNode("input", mergeProps({
            class: s.value,
            type: "radio"
          }, h.$attrs, {
            id: unref(o),
            onChange: S,
            "onUpdate:modelValue": k[0] || (k[0] = (L) => n.value = L),
            required: e.required ? true : void 0,
            "aria-required": e.required,
            ref_key: "inputRef",
            ref: l
          }), null, 16, sr), [
            [vModelRadio, n.value]
          ]),
          e.label ? (openBlock(), createElementBlock("label", {
            key: 0,
            class: normalizeClass(u.value),
            for: unref(o)
          }, toDisplayString(e.label), 11, ir)) : createCommentVNode("", true),
          e.validFeedback ? (openBlock(), createElementBlock("div", {
            key: 1,
            class: normalizeClass(c.value)
          }, toDisplayString(e.validFeedback), 3)) : createCommentVNode("", true),
          e.invalidFeedback ? (openBlock(), createElementBlock("div", {
            key: 2,
            class: normalizeClass(i.value)
          }, toDisplayString(e.invalidFeedback), 3)) : createCommentVNode("", true)
        ]),
        _: 1
      }, 8, ["class"])) : createCommentVNode("", true),
      e.wrap ? createCommentVNode("", true) : withDirectives((openBlock(), createElementBlock("input", mergeProps({
        key: 1,
        class: s.value,
        type: "radio"
      }, h.$attrs, {
        id: unref(o),
        onChange: S,
        "onUpdate:modelValue": k[1] || (k[1] = (L) => n.value = L),
        required: e.required ? true : void 0,
        "aria-required": e.required,
        ref_key: "inputRef",
        ref: l
      }), null, 16, ur)), [
        [vModelRadio, n.value]
      ]),
      !e.wrap && e.label ? (openBlock(), createElementBlock("label", {
        key: 2,
        class: normalizeClass(u.value),
        for: unref(o)
      }, toDisplayString(e.label), 11, cr)) : createCommentVNode("", true),
      !e.wrap && e.validFeedback ? (openBlock(), createElementBlock("div", {
        key: 3,
        class: normalizeClass(c.value)
      }, toDisplayString(e.validFeedback), 3)) : createCommentVNode("", true),
      !e.wrap && e.invalidFeedback ? (openBlock(), createElementBlock("div", {
        key: 4,
        class: normalizeClass(i.value)
      }, toDisplayString(e.invalidFeedback), 3)) : createCommentVNode("", true)
    ], 64));
  }
});
var fr = ["for"];
var vr = ["id"];
var pr = typeof FileList < "u" ? FileList : Object;
var mr = {
  name: "MDBFile"
};
var xs = defineComponent({
  ...mr,
  props: {
    id: String,
    inputClass: String,
    invalidFeedback: String,
    isInvalid: Boolean,
    isValid: Boolean,
    isValidated: Boolean,
    label: String,
    labelClass: String,
    modelValue: {
      type: [pr, Array],
      default: () => []
    },
    size: String,
    tooltipFeedback: Boolean,
    validFeedback: String,
    validateOnChange: Boolean
  },
  emits: ["update:modelValue", "on-validate"],
  setup(e, { emit: t }) {
    const a = e, l = a.id || xe("MDBFile-"), n = ref(a.modelValue), o = computed(() => [
      "form-control",
      a.size && `form-control-${a.size}`,
      c.value && i.value && "is-valid",
      c.value && !i.value && "is-invalid",
      a.inputClass
    ]), r = computed(() => ["form-label", a.labelClass]), s = computed(() => a.tooltipFeedback ? "valid-tooltip" : "valid-feedback"), u = computed(() => a.tooltipFeedback ? "invalid-tooltip" : "invalid-feedback"), c = ref(a.isValidated), i = ref(a.isValid), m = (v) => {
      const y = v.target;
      y.files && (i.value = y.files.length > 0, c.value = true, t("on-validate", i.value));
    }, $ = (v) => {
      const y = v.target;
      y.files && (n.value = y.files, t("update:modelValue", n.value), a.validateOnChange && m(v));
    };
    return watch(
      () => a.modelValue,
      (v) => n.value = v
    ), watch(
      () => a.isValidated,
      (v) => c.value = v
    ), watch(
      () => a.isValid,
      (v) => {
        i.value = v;
      }
    ), (v, y) => (openBlock(), createElementBlock(Fragment, null, [
      e.label ? (openBlock(), createElementBlock("label", {
        key: 0,
        class: normalizeClass(r.value),
        for: unref(l)
      }, toDisplayString(e.label), 11, fr)) : createCommentVNode("", true),
      createBaseVNode("input", mergeProps({
        type: "file",
        class: o.value
      }, v.$attrs, {
        id: unref(l),
        onChange: $
      }), null, 16, vr),
      e.validFeedback ? (openBlock(), createElementBlock("div", {
        key: 1,
        class: normalizeClass(s.value)
      }, toDisplayString(e.validFeedback), 3)) : createCommentVNode("", true),
      e.invalidFeedback ? (openBlock(), createElementBlock("div", {
        key: 2,
        class: normalizeClass(u.value)
      }, toDisplayString(e.invalidFeedback), 3)) : createCommentVNode("", true)
    ], 64));
  }
});
var gr = ["for"];
var hr = ["id", "value", "min", "max"];
var yr = { class: "thumb-value" };
var br = {
  name: "MDBRange",
  inheritAttrs: false
};
var Cs = defineComponent({
  ...br,
  props: {
    id: String,
    inputClass: String,
    label: String,
    labelClass: String,
    max: {
      type: Number,
      default: 100
    },
    min: {
      type: Number,
      default: 0
    },
    modelValue: {
      type: Number,
      default: 50
    },
    tag: {
      type: String,
      default: "div"
    },
    thumb: {
      type: Boolean,
      default: true
    },
    thumbClass: String,
    wrapperClass: String
  },
  emits: ["update:modelValue"],
  setup(e, { emit: t }) {
    const a = e, l = ref(a.modelValue), n = ref(a.min), o = ref(a.max), r = a.id || xe("MDBRange-"), s = ref(false), u = computed(() => ["range", a.wrapperClass]), c = computed(() => ["form-range", a.inputClass]), i = computed(() => ["form-label", a.labelClass]), m = computed(() => ["thumb", s.value && "thumb-active", a.thumbClass]), $ = ref(0), v = (h) => {
      const k = h.target;
      l.value = parseFloat(k.value), t("update:modelValue", l.value), S();
    }, y = (h) => {
      s.value = h;
    }, S = () => {
      const k = ((typeof l.value == "string" ? parseFloat(l.value) : l.value) - n.value) * 100 / (o.value - n.value);
      $.value = `calc(${k}% + (${8 - k * 0.15}px))`;
    };
    return nextTick(() => {
      S();
    }), watch(
      () => a.modelValue,
      (h) => {
        l.value = h, S();
      }
    ), (h, k) => (openBlock(), createElementBlock(Fragment, null, [
      e.label ? (openBlock(), createElementBlock("label", {
        key: 0,
        class: normalizeClass(i.value),
        for: unref(r)
      }, toDisplayString(e.label), 11, gr)) : createCommentVNode("", true),
      (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
        class: normalizeClass(u.value)
      }, {
        default: withCtx(() => [
          createBaseVNode("input", mergeProps({
            type: "range",
            class: c.value,
            id: unref(r),
            value: l.value,
            min: n.value,
            max: o.value
          }, h.$attrs, {
            onInput: v,
            onMousedown: k[0] || (k[0] = (L) => y(true)),
            onTouchstart: k[1] || (k[1] = (L) => y(true)),
            onMouseup: k[2] || (k[2] = (L) => y(false)),
            onTouchend: k[3] || (k[3] = (L) => y(false))
          }), null, 16, hr),
          e.thumb ? (openBlock(), createElementBlock("span", {
            key: 0,
            class: normalizeClass(m.value),
            style: normalizeStyle({ left: $.value })
          }, [
            createBaseVNode("span", yr, toDisplayString(l.value), 1)
          ], 6)) : createCommentVNode("", true)
        ]),
        _: 1
      }, 8, ["class"]))
    ], 64));
  }
});
var wr = ["id", "checked"];
var kr = ["for"];
var Br = {
  name: "MDBSwitch",
  inheritAttrs: false
};
var Ms = defineComponent({
  ...Br,
  props: {
    id: String,
    inputClass: String,
    label: String,
    labelClass: String,
    modelValue: {
      type: Boolean,
      default: false
    },
    tag: {
      type: String,
      default: "div"
    },
    wrapperClass: String
  },
  emits: ["update:modelValue"],
  setup(e, { emit: t }) {
    const a = e, l = ref(a.modelValue), n = a.id || xe("MDBSwitch-"), o = computed(() => ["form-check form-switch", a.wrapperClass]), r = computed(() => ["form-check-input", a.inputClass]), s = computed(() => ["form-check-label", a.labelClass]);
    function u() {
      l.value = !l.value, t("update:modelValue", l.value);
    }
    return watch(
      () => a.modelValue,
      (c) => l.value = c
    ), (c, i) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(o.value)
    }, {
      default: withCtx(() => [
        createBaseVNode("input", mergeProps({
          type: "checkbox",
          class: r.value,
          id: unref(n)
        }, c.$attrs, {
          checked: l.value,
          onChange: u
        }), null, 16, wr),
        createBaseVNode("label", {
          class: normalizeClass(s.value),
          for: unref(n)
        }, toDisplayString(e.label), 11, kr)
      ]),
      _: 1
    }, 8, ["class"]));
  }
});
var Vs = {
  mounted(e, t) {
    e.scrollspy = {
      links: [],
      container: window,
      scrollPosition: null,
      async: false,
      offset: 0
    }, t.value && (e.scrollspy.container = document.getElementById(t.value.container) || window, e.scrollspy.async = t.value.async || false, e.scrollspy.offset = t.value.offset || 0), e.scrollspy.scrollPosition = jt(e.scrollspy.container), e.scrollspy.findHrefs = (a) => {
      var l;
      if (a.attributes && a instanceof HTMLAnchorElement && a.href) {
        if (e.scrollspy.links.push(a), a.classList.contains("collapsible-scrollspy")) {
          const n = (l = a.parentNode) == null ? void 0 : l.querySelector("ul");
          n.dataset.mdbCollapsibleScrollspyHeight = n.clientHeight.toString(), n.style.overflow = "hidden", n.style.height = "0";
        }
      } else
        a.childNodes && a.childNodes.forEach(
          (n) => {
            var o, r;
            return (r = (o = e.scrollspy).findHrefs) == null ? void 0 : r.call(o, n);
          }
        );
    }, e.scrollspy.setActive = (a) => {
      if (t.value && t.value.callback) {
        t.instance[t.value.callback](a);
        return;
      }
      e.scrollspy.links.forEach((l, n) => {
        a === n ? l.classList.add("active") : l.classList.remove("active");
      }), $r(e.scrollspy.links, a, e.scrollspy.container), zt(e.scrollspy.links);
    }, e.scrollspy.spy = () => {
      var n, o, r, s;
      if (e.disableScroll)
        return;
      const a = e.scrollspy.container;
      e.scrollspy.scrollPosition = jt(a), e.scrollspy.links.forEach((u) => {
        const c = document.querySelector(u.hash);
        if (!c)
          return;
        const i = c.getBoundingClientRect();
        let m;
        if (a === window)
          m = window.innerHeight > i.top && i.top + i.height >= 0;
        else if (!(a instanceof Window)) {
          const $ = a.getBoundingClientRect();
          m = i.top <= $.top + $.height && i.top + i.height >= $.top;
        }
        u.isLinkActive = m;
      });
      const l = e.scrollspy.links.filter(
        (u) => u.isLinkActive
      );
      if (l.length > 0) {
        const c = l[0].scrollspyIndex;
        (o = (n = e.scrollspy).setActive) == null || o.call(n, c);
      } else
        (s = (r = e.scrollspy).setActive) == null || s.call(r, -1);
    }, e.scrollspy.clickHandler = (a, l) => {
      var s, u;
      const n = e.scrollspy.container;
      window.clearTimeout(e.disableScrollTimeout), e.disableScroll = true, a.preventDefault();
      const o = document.querySelector(l.hash);
      if (!o)
        return;
      const r = o.getBoundingClientRect();
      if (n === window)
        window.scrollTo({
          top: window.scrollY + r.y - e.scrollspy.offset
        });
      else if (!(n instanceof Window)) {
        const c = n.getBoundingClientRect();
        n.style.scrollBehavior = "smooth", n.scrollTop = n.scrollTop + r.y - c.y - e.scrollspy.offset;
      }
      (u = (s = e.scrollspy).setActive) == null || u.call(s, l.scrollspyIndex), l.scrollspyIndex && Sr(e.scrollspy.links[l.scrollspyIndex], e), zt(e.scrollspy.links), e.disableScrollTimeout = setTimeout(() => {
        e.disableScroll = false;
      }, 800);
    }, e.scrollspy.findHrefs(e), e.scrollspy.links.forEach((a, l) => {
      a.scrollspyIndex = l, a.addEventListener(
        "click",
        (n) => {
          var o, r;
          return (r = (o = e.scrollspy).clickHandler) == null ? void 0 : r.call(o, n, a);
        }
      );
    }), e.scrollspy.spy(), e.scrollspy.container.addEventListener(
      "scroll",
      (a) => {
        var l, n;
        return (n = (l = e.scrollspy).spy) == null ? void 0 : n.call(l, a);
      }
    ), window.addEventListener("resize", (a) => {
      var l, n;
      return (n = (l = e.scrollspy).spy) == null ? void 0 : n.call(l, a);
    });
  },
  updated(e, t) {
    var a, l;
    (a = t.modifiers) != null && a.async && t.value && !t.value.loading && ((l = t.oldValue) != null && l.loading) && setTimeout(() => {
      var n, o, r, s;
      e.scrollspy.links = [], (o = (n = e.scrollspy).findHrefs) == null || o.call(n, e), e.scrollspy.links.forEach((u, c) => {
        u.scrollspyIndex = c, u.addEventListener(
          "click",
          (i) => {
            var m, $;
            return ($ = (m = e.scrollspy).clickHandler) == null ? void 0 : $.call(m, i, u);
          }
        );
      }), (s = (r = e.scrollspy).spy) == null || s.call(r);
    }, 0);
  },
  unmounted(e) {
    window.removeEventListener("scroll", (t) => {
      var a, l;
      return (l = (a = e.scrollspy).spy) == null ? void 0 : l.call(a, t);
    }), window.removeEventListener("resize", (t) => {
      var a, l;
      return (l = (a = e.scrollspy).spy) == null ? void 0 : l.call(a, t);
    });
  }
};
var $r = (e, t, a) => {
  const l = e[t];
  if (!l || !l.parentNode)
    return;
  const n = Array.from(
    l.parentNode.querySelectorAll("a")
  );
  n.shift(), n.forEach((r) => {
    const s = document.querySelector(r.hash);
    if (!s)
      return;
    const u = s.getBoundingClientRect();
    let c;
    if (a === window)
      c = window.innerHeight > u.top && u.top + u.height >= 0;
    else if (!(a instanceof Window)) {
      const i = a.getBoundingClientRect();
      c = u.top < i.top && u.top + u.height > i.top;
    }
    r.isActive = c;
  });
  const o = n.filter((r) => r.isLinkActive);
  o.length > 0 && o[0].classList.add("active");
};
var Sr = (e, t) => {
  var l;
  let a = e.parentNode;
  if (a)
    for (; a && a !== t; )
      a.classList.contains("nav-item") && ((l = a.querySelector("a")) == null || l.classList.add("active")), a = a.parentNode;
};
var jt = (e) => e === window ? e.scrollY : e instanceof Window ? null : e.scrollTop;
var zt = (e) => {
  e.forEach((t) => {
    var a, l;
    if (t.classList.contains("collapsible-scrollspy") && t.classList.contains("active")) {
      const n = (a = t.parentNode) == null ? void 0 : a.querySelector("ul");
      n && (n.style.overflow = "hidden", n.style.height = `${n.dataset.mdbCollapsibleScrollspyHeight}px`);
    } else if (t.classList.contains("collapsible-scrollspy")) {
      const n = (l = t.parentNode) == null ? void 0 : l.querySelector("ul");
      n && (n.style.overflow = "hidden", n.style.height = "0");
    }
  });
};
export {
  es as MDBAccordion,
  ts as MDBAccordionItem,
  Cr as MDBBadge,
  cs as MDBBreadcrumb,
  ds as MDBBreadcrumbItem,
  Ca as MDBBtn,
  Da as MDBBtnClose,
  Mr as MDBBtnGroup,
  Vr as MDBCard,
  Dr as MDBCardBody,
  Ar as MDBCardFooter,
  _r as MDBCardGroup,
  Tr as MDBCardHeader,
  Nr as MDBCardImg,
  Lr as MDBCardLink,
  Er as MDBCardText,
  Or as MDBCardTitle,
  Ir as MDBCarousel,
  $s as MDBCheckbox,
  ys as MDBCol,
  fl as MDBCollapse,
  ws as MDBContainer,
  zr as MDBDropdown,
  Gr as MDBDropdownItem,
  Hr as MDBDropdownMenu,
  Wr as MDBDropdownToggle,
  xs as MDBFile,
  fs as MDBFooter,
  Xn as MDBIcon,
  qt as MDBInput,
  Pr as MDBListGroup,
  Fr as MDBListGroupItem,
  Yr as MDBModal,
  Qr as MDBModalBody,
  Zr as MDBModalFooter,
  Kr as MDBModalHeader,
  Jr as MDBModalTitle,
  as as MDBNavbar,
  ns as MDBNavbarBrand,
  rs as MDBNavbarItem,
  os as MDBNavbarNav,
  ls as MDBNavbarToggler,
  us as MDBPageItem,
  is as MDBPageNav,
  ss as MDBPagination,
  Xr as MDBPopover,
  Rr as MDBProgress,
  qr as MDBProgressBar,
  Ss as MDBRadio,
  Cs as MDBRange,
  bs as MDBRow,
  jr as MDBSpinner,
  Ms as MDBSwitch,
  hs as MDBTabContent,
  ms as MDBTabItem,
  ps as MDBTabNav,
  gs as MDBTabPane,
  ks as MDBTable,
  vs as MDBTabs,
  Bs as MDBTextarea,
  Ur as MDBTooltip,
  Ze as mdbClickOutside,
  it as mdbRipple,
  Vs as mdbScrollspy
};
//# sourceMappingURL=mdb-vue-ui-kit.js.map
